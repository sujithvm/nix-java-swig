/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.5
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#include <nix/Block.hpp>
#include <nix/DataArray.hpp>
#include <nix/Tag.hpp>
#include <nix/MultiTag.hpp>
#include <nix/Dimensions.hpp>
#include <nix/File.hpp>
#include <nix/Property.hpp>
#include <nix/Feature.hpp>
#include <nix/Section.hpp>
#include <nix/Source.hpp>
#include <nix/Value.hpp>
#include <nix/DataView.hpp>
#include <nix/DataType.hpp>
#include <nix/base/ImplContainer.hpp>
#include <nix/base/Entity.hpp>
#include <nix/base/NamedEntity.hpp>
#include <nix/base/EntityWithSources.hpp>
#include <nix/base/EntityWithMetadata.hpp>
#include <nix/base/IFile.hpp>
#include <nix/base/IBlock.hpp>
#include <nix/base/IDataArray.hpp>
#include <nix/base/IMultiTag.hpp>
#include <nix/base/IDimensions.hpp>
#include <nix/base/IProperty.hpp>
#include <nix/base/IFeature.hpp>
#include <nix/base/ISection.hpp>
#include <nix/base/ITag.hpp>
#include <nix/base/ISource.hpp>
#include <nix/util/util.hpp>
#include <nix/util/filter.hpp>
#include <nix/util/dataAccess.hpp>

using namespace nix;



#include <string>


#include <stdexcept>


#include <vector>
#include <stdexcept>


#include <stdint.h>		// Use the C99 official header

SWIGINTERN std::vector< int >::const_reference std_vector_Sl_int_Sg__get(std::vector< int > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_int_Sg__set(std::vector< int > *self,int i,std::vector< int >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< double >::const_reference std_vector_Sl_double_Sg__get(std::vector< double > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_double_Sg__set(std::vector< double > *self,int i,std::vector< double >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::string >::const_reference std_vector_Sl_std_string_Sg__get(std::vector< std::string > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_string_Sg__set(std::vector< std::string > *self,int i,std::vector< std::string >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< nix::Block >::const_reference std_vector_Sl_nix_Block_Sg__get(std::vector< nix::Block > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_nix_Block_Sg__set(std::vector< nix::Block > *self,int i,std::vector< nix::Block >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< nix::DataArray >::const_reference std_vector_Sl_nix_DataArray_Sg__get(std::vector< nix::DataArray > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_nix_DataArray_Sg__set(std::vector< nix::DataArray > *self,int i,std::vector< nix::DataArray >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< nix::Dimension >::const_reference std_vector_Sl_nix_Dimension_Sg__get(std::vector< nix::Dimension > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_nix_Dimension_Sg__set(std::vector< nix::Dimension > *self,int i,std::vector< nix::Dimension >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< nix::Property >::const_reference std_vector_Sl_nix_Property_Sg__get(std::vector< nix::Property > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_nix_Property_Sg__set(std::vector< nix::Property > *self,int i,std::vector< nix::Property >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< nix::Section >::const_reference std_vector_Sl_nix_Section_Sg__get(std::vector< nix::Section > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_nix_Section_Sg__set(std::vector< nix::Section > *self,int i,std::vector< nix::Section >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< nix::Source >::const_reference std_vector_Sl_nix_Source_Sg__get(std::vector< nix::Source > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_nix_Source_Sg__set(std::vector< nix::Source > *self,int i,std::vector< nix::Source >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< nix::Value >::const_reference std_vector_Sl_nix_Value_Sg__get(std::vector< nix::Value > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_nix_Value_Sg__set(std::vector< nix::Value > *self,int i,std::vector< nix::Value >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_nixJNI_new_1IntVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< int > *)new std::vector< int >();
  *(std::vector< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_new_1IntVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< int >::size_type arg1 ;
  std::vector< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< int >::size_type)jarg1; 
  result = (std::vector< int > *)new std::vector< int >(arg1);
  *(std::vector< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_IntVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  result = ((std::vector< int > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_IntVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  result = ((std::vector< int > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nixJNI_IntVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  arg2 = (std::vector< int >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_nixJNI_IntVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  result = (bool)((std::vector< int > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nixJNI_IntVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_nixJNI_IntVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::value_type *arg2 = 0 ;
  std::vector< int >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  temp2 = (std::vector< int >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< int >::value_type const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_nixJNI_IntVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  std::vector< int >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< int >::value_type *) &std_vector_Sl_int_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nixJNI_IntVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  std::vector< int >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< int >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_int_Sg__set(arg1,arg2,(int const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_nixJNI_delete_1IntVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< int > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_new_1DoubleVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< double > *)new std::vector< double >();
  *(std::vector< double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_new_1DoubleVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< double >::size_type arg1 ;
  std::vector< double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< double >::size_type)jarg1; 
  result = (std::vector< double > *)new std::vector< double >(arg1);
  *(std::vector< double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_DoubleVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  result = ((std::vector< double > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_DoubleVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  result = ((std::vector< double > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nixJNI_DoubleVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  arg2 = (std::vector< double >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_nixJNI_DoubleVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  result = (bool)((std::vector< double > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nixJNI_DoubleVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_nixJNI_DoubleVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::value_type *arg2 = 0 ;
  std::vector< double >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  temp2 = (std::vector< double >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< double >::value_type const &)*arg2);
}


SWIGEXPORT jdouble JNICALL Java_nixJNI_DoubleVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  std::vector< double >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< double >::value_type *) &std_vector_Sl_double_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jdouble)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nixJNI_DoubleVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  std::vector< double >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< double >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_double_Sg__set(arg1,arg2,(double const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_nixJNI_delete_1DoubleVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< double > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_new_1StringVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::string > *)new std::vector< std::string >();
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_new_1StringVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::string >::size_type arg1 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::string >::size_type)jarg1; 
  result = (std::vector< std::string > *)new std::vector< std::string >(arg1);
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_StringVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = ((std::vector< std::string > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_StringVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = ((std::vector< std::string > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nixJNI_StringVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (std::vector< std::string >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_nixJNI_StringVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = (bool)((std::vector< std::string > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nixJNI_StringVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_nixJNI_StringVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::vector< std::string >::value_type arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->push_back((std::vector< std::string >::value_type const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_nixJNI_StringVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::string >::value_type *) &std_vector_Sl_std_string_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nixJNI_StringVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::vector< std::string >::value_type arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  try {
    std_vector_Sl_std_string_Sg__set(arg1,arg2,(std::string const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_nixJNI_delete_1StringVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_new_1BlockVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< nix::Block > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< nix::Block > *)new std::vector< nix::Block >();
  *(std::vector< nix::Block > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_new_1BlockVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< nix::Block >::size_type arg1 ;
  std::vector< nix::Block > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< nix::Block >::size_type)jarg1; 
  result = (std::vector< nix::Block > *)new std::vector< nix::Block >(arg1);
  *(std::vector< nix::Block > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_BlockVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< nix::Block > *arg1 = (std::vector< nix::Block > *) 0 ;
  std::vector< nix::Block >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nix::Block > **)&jarg1; 
  result = ((std::vector< nix::Block > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_BlockVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< nix::Block > *arg1 = (std::vector< nix::Block > *) 0 ;
  std::vector< nix::Block >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nix::Block > **)&jarg1; 
  result = ((std::vector< nix::Block > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nixJNI_BlockVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< nix::Block > *arg1 = (std::vector< nix::Block > *) 0 ;
  std::vector< nix::Block >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nix::Block > **)&jarg1; 
  arg2 = (std::vector< nix::Block >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_nixJNI_BlockVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< nix::Block > *arg1 = (std::vector< nix::Block > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nix::Block > **)&jarg1; 
  result = (bool)((std::vector< nix::Block > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nixJNI_BlockVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< nix::Block > *arg1 = (std::vector< nix::Block > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nix::Block > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_nixJNI_BlockVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< nix::Block > *arg1 = (std::vector< nix::Block > *) 0 ;
  std::vector< nix::Block >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< nix::Block > **)&jarg1; 
  arg2 = *(std::vector< nix::Block >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< nix::Block >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< nix::Block >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_nixJNI_BlockVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< nix::Block > *arg1 = (std::vector< nix::Block > *) 0 ;
  int arg2 ;
  std::vector< nix::Block >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nix::Block > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< nix::Block >::value_type *) &std_vector_Sl_nix_Block_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< nix::Block >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nixJNI_BlockVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< nix::Block > *arg1 = (std::vector< nix::Block > *) 0 ;
  int arg2 ;
  std::vector< nix::Block >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< nix::Block > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< nix::Block >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< nix::Block >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_nix_Block_Sg__set(arg1,arg2,(nix::Block const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_nixJNI_delete_1BlockVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< nix::Block > *arg1 = (std::vector< nix::Block > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< nix::Block > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_new_1DataArrayVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< nix::DataArray > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< nix::DataArray > *)new std::vector< nix::DataArray >();
  *(std::vector< nix::DataArray > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_new_1DataArrayVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< nix::DataArray >::size_type arg1 ;
  std::vector< nix::DataArray > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< nix::DataArray >::size_type)jarg1; 
  result = (std::vector< nix::DataArray > *)new std::vector< nix::DataArray >(arg1);
  *(std::vector< nix::DataArray > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_DataArrayVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< nix::DataArray > *arg1 = (std::vector< nix::DataArray > *) 0 ;
  std::vector< nix::DataArray >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nix::DataArray > **)&jarg1; 
  result = ((std::vector< nix::DataArray > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_DataArrayVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< nix::DataArray > *arg1 = (std::vector< nix::DataArray > *) 0 ;
  std::vector< nix::DataArray >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nix::DataArray > **)&jarg1; 
  result = ((std::vector< nix::DataArray > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nixJNI_DataArrayVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< nix::DataArray > *arg1 = (std::vector< nix::DataArray > *) 0 ;
  std::vector< nix::DataArray >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nix::DataArray > **)&jarg1; 
  arg2 = (std::vector< nix::DataArray >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_nixJNI_DataArrayVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< nix::DataArray > *arg1 = (std::vector< nix::DataArray > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nix::DataArray > **)&jarg1; 
  result = (bool)((std::vector< nix::DataArray > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nixJNI_DataArrayVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< nix::DataArray > *arg1 = (std::vector< nix::DataArray > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nix::DataArray > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_nixJNI_DataArrayVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< nix::DataArray > *arg1 = (std::vector< nix::DataArray > *) 0 ;
  std::vector< nix::DataArray >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< nix::DataArray > **)&jarg1; 
  arg2 = *(std::vector< nix::DataArray >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< nix::DataArray >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< nix::DataArray >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_nixJNI_DataArrayVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< nix::DataArray > *arg1 = (std::vector< nix::DataArray > *) 0 ;
  int arg2 ;
  std::vector< nix::DataArray >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nix::DataArray > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< nix::DataArray >::value_type *) &std_vector_Sl_nix_DataArray_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< nix::DataArray >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nixJNI_DataArrayVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< nix::DataArray > *arg1 = (std::vector< nix::DataArray > *) 0 ;
  int arg2 ;
  std::vector< nix::DataArray >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< nix::DataArray > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< nix::DataArray >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< nix::DataArray >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_nix_DataArray_Sg__set(arg1,arg2,(nix::DataArray const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_nixJNI_delete_1DataArrayVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< nix::DataArray > *arg1 = (std::vector< nix::DataArray > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< nix::DataArray > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_new_1DimensionVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< nix::Dimension > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< nix::Dimension > *)new std::vector< nix::Dimension >();
  *(std::vector< nix::Dimension > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_new_1DimensionVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< nix::Dimension >::size_type arg1 ;
  std::vector< nix::Dimension > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< nix::Dimension >::size_type)jarg1; 
  result = (std::vector< nix::Dimension > *)new std::vector< nix::Dimension >(arg1);
  *(std::vector< nix::Dimension > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_DimensionVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< nix::Dimension > *arg1 = (std::vector< nix::Dimension > *) 0 ;
  std::vector< nix::Dimension >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nix::Dimension > **)&jarg1; 
  result = ((std::vector< nix::Dimension > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_DimensionVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< nix::Dimension > *arg1 = (std::vector< nix::Dimension > *) 0 ;
  std::vector< nix::Dimension >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nix::Dimension > **)&jarg1; 
  result = ((std::vector< nix::Dimension > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nixJNI_DimensionVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< nix::Dimension > *arg1 = (std::vector< nix::Dimension > *) 0 ;
  std::vector< nix::Dimension >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nix::Dimension > **)&jarg1; 
  arg2 = (std::vector< nix::Dimension >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_nixJNI_DimensionVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< nix::Dimension > *arg1 = (std::vector< nix::Dimension > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nix::Dimension > **)&jarg1; 
  result = (bool)((std::vector< nix::Dimension > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nixJNI_DimensionVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< nix::Dimension > *arg1 = (std::vector< nix::Dimension > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nix::Dimension > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_nixJNI_DimensionVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< nix::Dimension > *arg1 = (std::vector< nix::Dimension > *) 0 ;
  std::vector< nix::Dimension >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< nix::Dimension > **)&jarg1; 
  arg2 = *(std::vector< nix::Dimension >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< nix::Dimension >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< nix::Dimension >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_nixJNI_DimensionVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< nix::Dimension > *arg1 = (std::vector< nix::Dimension > *) 0 ;
  int arg2 ;
  std::vector< nix::Dimension >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nix::Dimension > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< nix::Dimension >::value_type *) &std_vector_Sl_nix_Dimension_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< nix::Dimension >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nixJNI_DimensionVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< nix::Dimension > *arg1 = (std::vector< nix::Dimension > *) 0 ;
  int arg2 ;
  std::vector< nix::Dimension >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< nix::Dimension > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< nix::Dimension >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< nix::Dimension >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_nix_Dimension_Sg__set(arg1,arg2,(nix::Dimension const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_nixJNI_delete_1DimensionVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< nix::Dimension > *arg1 = (std::vector< nix::Dimension > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< nix::Dimension > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_new_1PropertyVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< nix::Property > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< nix::Property > *)new std::vector< nix::Property >();
  *(std::vector< nix::Property > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_new_1PropertyVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< nix::Property >::size_type arg1 ;
  std::vector< nix::Property > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< nix::Property >::size_type)jarg1; 
  result = (std::vector< nix::Property > *)new std::vector< nix::Property >(arg1);
  *(std::vector< nix::Property > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_PropertyVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< nix::Property > *arg1 = (std::vector< nix::Property > *) 0 ;
  std::vector< nix::Property >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nix::Property > **)&jarg1; 
  result = ((std::vector< nix::Property > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_PropertyVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< nix::Property > *arg1 = (std::vector< nix::Property > *) 0 ;
  std::vector< nix::Property >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nix::Property > **)&jarg1; 
  result = ((std::vector< nix::Property > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nixJNI_PropertyVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< nix::Property > *arg1 = (std::vector< nix::Property > *) 0 ;
  std::vector< nix::Property >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nix::Property > **)&jarg1; 
  arg2 = (std::vector< nix::Property >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_nixJNI_PropertyVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< nix::Property > *arg1 = (std::vector< nix::Property > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nix::Property > **)&jarg1; 
  result = (bool)((std::vector< nix::Property > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nixJNI_PropertyVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< nix::Property > *arg1 = (std::vector< nix::Property > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nix::Property > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_nixJNI_PropertyVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< nix::Property > *arg1 = (std::vector< nix::Property > *) 0 ;
  std::vector< nix::Property >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< nix::Property > **)&jarg1; 
  arg2 = *(std::vector< nix::Property >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< nix::Property >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< nix::Property >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_nixJNI_PropertyVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< nix::Property > *arg1 = (std::vector< nix::Property > *) 0 ;
  int arg2 ;
  std::vector< nix::Property >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nix::Property > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< nix::Property >::value_type *) &std_vector_Sl_nix_Property_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< nix::Property >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nixJNI_PropertyVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< nix::Property > *arg1 = (std::vector< nix::Property > *) 0 ;
  int arg2 ;
  std::vector< nix::Property >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< nix::Property > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< nix::Property >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< nix::Property >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_nix_Property_Sg__set(arg1,arg2,(nix::Property const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_nixJNI_delete_1PropertyVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< nix::Property > *arg1 = (std::vector< nix::Property > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< nix::Property > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_new_1SectionVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< nix::Section > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< nix::Section > *)new std::vector< nix::Section >();
  *(std::vector< nix::Section > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_new_1SectionVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< nix::Section >::size_type arg1 ;
  std::vector< nix::Section > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< nix::Section >::size_type)jarg1; 
  result = (std::vector< nix::Section > *)new std::vector< nix::Section >(arg1);
  *(std::vector< nix::Section > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_SectionVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< nix::Section > *arg1 = (std::vector< nix::Section > *) 0 ;
  std::vector< nix::Section >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nix::Section > **)&jarg1; 
  result = ((std::vector< nix::Section > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_SectionVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< nix::Section > *arg1 = (std::vector< nix::Section > *) 0 ;
  std::vector< nix::Section >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nix::Section > **)&jarg1; 
  result = ((std::vector< nix::Section > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nixJNI_SectionVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< nix::Section > *arg1 = (std::vector< nix::Section > *) 0 ;
  std::vector< nix::Section >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nix::Section > **)&jarg1; 
  arg2 = (std::vector< nix::Section >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_nixJNI_SectionVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< nix::Section > *arg1 = (std::vector< nix::Section > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nix::Section > **)&jarg1; 
  result = (bool)((std::vector< nix::Section > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nixJNI_SectionVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< nix::Section > *arg1 = (std::vector< nix::Section > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nix::Section > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_nixJNI_SectionVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< nix::Section > *arg1 = (std::vector< nix::Section > *) 0 ;
  std::vector< nix::Section >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< nix::Section > **)&jarg1; 
  arg2 = *(std::vector< nix::Section >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< nix::Section >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< nix::Section >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_nixJNI_SectionVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< nix::Section > *arg1 = (std::vector< nix::Section > *) 0 ;
  int arg2 ;
  std::vector< nix::Section >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nix::Section > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< nix::Section >::value_type *) &std_vector_Sl_nix_Section_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< nix::Section >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nixJNI_SectionVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< nix::Section > *arg1 = (std::vector< nix::Section > *) 0 ;
  int arg2 ;
  std::vector< nix::Section >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< nix::Section > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< nix::Section >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< nix::Section >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_nix_Section_Sg__set(arg1,arg2,(nix::Section const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_nixJNI_delete_1SectionVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< nix::Section > *arg1 = (std::vector< nix::Section > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< nix::Section > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_new_1SourceVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< nix::Source > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< nix::Source > *)new std::vector< nix::Source >();
  *(std::vector< nix::Source > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_new_1SourceVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< nix::Source >::size_type arg1 ;
  std::vector< nix::Source > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< nix::Source >::size_type)jarg1; 
  result = (std::vector< nix::Source > *)new std::vector< nix::Source >(arg1);
  *(std::vector< nix::Source > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_SourceVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< nix::Source > *arg1 = (std::vector< nix::Source > *) 0 ;
  std::vector< nix::Source >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nix::Source > **)&jarg1; 
  result = ((std::vector< nix::Source > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_SourceVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< nix::Source > *arg1 = (std::vector< nix::Source > *) 0 ;
  std::vector< nix::Source >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nix::Source > **)&jarg1; 
  result = ((std::vector< nix::Source > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nixJNI_SourceVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< nix::Source > *arg1 = (std::vector< nix::Source > *) 0 ;
  std::vector< nix::Source >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nix::Source > **)&jarg1; 
  arg2 = (std::vector< nix::Source >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_nixJNI_SourceVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< nix::Source > *arg1 = (std::vector< nix::Source > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nix::Source > **)&jarg1; 
  result = (bool)((std::vector< nix::Source > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nixJNI_SourceVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< nix::Source > *arg1 = (std::vector< nix::Source > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nix::Source > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_nixJNI_SourceVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< nix::Source > *arg1 = (std::vector< nix::Source > *) 0 ;
  std::vector< nix::Source >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< nix::Source > **)&jarg1; 
  arg2 = *(std::vector< nix::Source >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< nix::Source >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< nix::Source >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_nixJNI_SourceVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< nix::Source > *arg1 = (std::vector< nix::Source > *) 0 ;
  int arg2 ;
  std::vector< nix::Source >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nix::Source > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< nix::Source >::value_type *) &std_vector_Sl_nix_Source_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< nix::Source >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nixJNI_SourceVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< nix::Source > *arg1 = (std::vector< nix::Source > *) 0 ;
  int arg2 ;
  std::vector< nix::Source >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< nix::Source > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< nix::Source >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< nix::Source >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_nix_Source_Sg__set(arg1,arg2,(nix::Source const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_nixJNI_delete_1SourceVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< nix::Source > *arg1 = (std::vector< nix::Source > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< nix::Source > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_new_1ValueVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< nix::Value > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< nix::Value > *)new std::vector< nix::Value >();
  *(std::vector< nix::Value > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_new_1ValueVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< nix::Value >::size_type arg1 ;
  std::vector< nix::Value > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< nix::Value >::size_type)jarg1; 
  result = (std::vector< nix::Value > *)new std::vector< nix::Value >(arg1);
  *(std::vector< nix::Value > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_ValueVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< nix::Value > *arg1 = (std::vector< nix::Value > *) 0 ;
  std::vector< nix::Value >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nix::Value > **)&jarg1; 
  result = ((std::vector< nix::Value > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_ValueVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< nix::Value > *arg1 = (std::vector< nix::Value > *) 0 ;
  std::vector< nix::Value >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nix::Value > **)&jarg1; 
  result = ((std::vector< nix::Value > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nixJNI_ValueVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< nix::Value > *arg1 = (std::vector< nix::Value > *) 0 ;
  std::vector< nix::Value >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nix::Value > **)&jarg1; 
  arg2 = (std::vector< nix::Value >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_nixJNI_ValueVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< nix::Value > *arg1 = (std::vector< nix::Value > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nix::Value > **)&jarg1; 
  result = (bool)((std::vector< nix::Value > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nixJNI_ValueVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< nix::Value > *arg1 = (std::vector< nix::Value > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nix::Value > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_nixJNI_ValueVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< nix::Value > *arg1 = (std::vector< nix::Value > *) 0 ;
  std::vector< nix::Value >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< nix::Value > **)&jarg1; 
  arg2 = *(std::vector< nix::Value >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< nix::Value >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< nix::Value >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_nixJNI_ValueVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< nix::Value > *arg1 = (std::vector< nix::Value > *) 0 ;
  int arg2 ;
  std::vector< nix::Value >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< nix::Value > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< nix::Value >::value_type *) &std_vector_Sl_nix_Value_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< nix::Value >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nixJNI_ValueVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< nix::Value > *arg1 = (std::vector< nix::Value > *) 0 ;
  int arg2 ;
  std::vector< nix::Value >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< nix::Value > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< nix::Value >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< nix::Value >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_nix_Value_Sg__set(arg1,arg2,(nix::Value const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_nixJNI_delete_1ValueVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< nix::Value > *arg1 = (std::vector< nix::Value > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< nix::Value > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_nixJNI_FileMode_1ReadOnly_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  nix::FileMode result;
  
  (void)jenv;
  (void)jcls;
  result = (nix::FileMode)nix::FileMode::ReadOnly;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nixJNI_Implementation_1Hdf5_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  nix::Implementation result;
  
  (void)jenv;
  (void)jcls;
  result = (nix::Implementation)nix::Implementation::Hdf5;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nixJNI_DataType_1Nothing_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  nix::DataType result;
  
  (void)jenv;
  (void)jcls;
  result = (nix::DataType)nix::DataType::Nothing;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_data_1type_1to_1size(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  nix::DataType arg1 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (nix::DataType)jarg1; 
  result = nix::data_type_to_size(arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_nixJNI_data_1type_1to_1string(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  nix::DataType arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (nix::DataType)jarg1; 
  result = nix::data_type_to_string(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nixJNI_string_1to_1data_1type(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::string *arg1 = 0 ;
  nix::DataType result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (nix::DataType)nix::string_to_data_type((std::string const &)*arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_new_1SampledDimension_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  nix::SampledDimension *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (nix::SampledDimension *)new nix::SampledDimension();
  *(nix::SampledDimension **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_new_1SampledDimension_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nix::SampledDimension *arg1 = 0 ;
  nix::SampledDimension *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::SampledDimension **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "nix::SampledDimension const & reference is null");
    return 0;
  } 
  result = (nix::SampledDimension *)new nix::SampledDimension((nix::SampledDimension const &)*arg1);
  *(nix::SampledDimension **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_SampledDimension_1index(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nix::SampledDimension *arg1 = (nix::SampledDimension *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::SampledDimension **)&jarg1; 
  result = ((nix::SampledDimension const *)arg1)->index();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nixJNI_SampledDimension_1dimensionType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  nix::SampledDimension *arg1 = (nix::SampledDimension *) 0 ;
  nix::DimensionType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::SampledDimension **)&jarg1; 
  result = (nix::DimensionType)((nix::SampledDimension const *)arg1)->dimensionType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_SampledDimension_1label_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nix::SampledDimension *arg1 = (nix::SampledDimension *) 0 ;
  boost::optional< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::SampledDimension **)&jarg1; 
  result = ((nix::SampledDimension const *)arg1)->label();
  *(boost::optional< std::string > **)&jresult = new boost::optional< std::string >((const boost::optional< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nixJNI_SampledDimension_1label_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  nix::SampledDimension *arg1 = (nix::SampledDimension *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::SampledDimension **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->label((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_nixJNI_SampledDimension_1removeLabel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  nix::SampledDimension *arg1 = (nix::SampledDimension *) 0 ;
  nix::none_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  
  arg2 = boost::none;
  
  (void)jarg1_;
  arg1 = *(nix::SampledDimension **)&jarg1; 
  (arg1)->label(arg2);
}


SWIGEXPORT jlong JNICALL Java_nixJNI_SampledDimension_1unit_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nix::SampledDimension *arg1 = (nix::SampledDimension *) 0 ;
  boost::optional< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::SampledDimension **)&jarg1; 
  result = ((nix::SampledDimension const *)arg1)->unit();
  *(boost::optional< std::string > **)&jresult = new boost::optional< std::string >((const boost::optional< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nixJNI_SampledDimension_1unit_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  nix::SampledDimension *arg1 = (nix::SampledDimension *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::SampledDimension **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->unit((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_nixJNI_SampledDimension_1removeUnit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  nix::SampledDimension *arg1 = (nix::SampledDimension *) 0 ;
  nix::none_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  
  arg2 = boost::none;
  
  (void)jarg1_;
  arg1 = *(nix::SampledDimension **)&jarg1; 
  (arg1)->unit(arg2);
}


SWIGEXPORT jdouble JNICALL Java_nixJNI_SampledDimension_1samplingInterval_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  nix::SampledDimension *arg1 = (nix::SampledDimension *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::SampledDimension **)&jarg1; 
  result = (double)((nix::SampledDimension const *)arg1)->samplingInterval();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nixJNI_SampledDimension_1samplingInterval_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  nix::SampledDimension *arg1 = (nix::SampledDimension *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::SampledDimension **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->samplingInterval(arg2);
}


SWIGEXPORT jlong JNICALL Java_nixJNI_SampledDimension_1offset_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nix::SampledDimension *arg1 = (nix::SampledDimension *) 0 ;
  boost::optional< double > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::SampledDimension **)&jarg1; 
  result = ((nix::SampledDimension const *)arg1)->offset();
  *(boost::optional< double > **)&jresult = new boost::optional< double >((const boost::optional< double > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nixJNI_SampledDimension_1offset_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  nix::SampledDimension *arg1 = (nix::SampledDimension *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::SampledDimension **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->offset(arg2);
}


SWIGEXPORT void JNICALL Java_nixJNI_SampledDimension_1removeOffset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  nix::SampledDimension *arg1 = (nix::SampledDimension *) 0 ;
  boost::none_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  
  arg2 = boost::none;
  
  (void)jarg1_;
  arg1 = *(nix::SampledDimension **)&jarg1; 
  (arg1)->offset(arg2);
}


SWIGEXPORT jlong JNICALL Java_nixJNI_SampledDimension_1indexOf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jlong jresult = 0 ;
  nix::SampledDimension *arg1 = (nix::SampledDimension *) 0 ;
  double arg2 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::SampledDimension **)&jarg1; 
  arg2 = (double)jarg2; 
  result = ((nix::SampledDimension const *)arg1)->indexOf(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_nixJNI_SampledDimension_1positionAt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jdouble jresult = 0 ;
  nix::SampledDimension *arg1 = (nix::SampledDimension *) 0 ;
  size_t arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::SampledDimension **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (double)((nix::SampledDimension const *)arg1)->positionAt(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_SampledDimension_1axis_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  nix::SampledDimension *arg1 = (nix::SampledDimension *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  std::vector< double > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::SampledDimension **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  result = ((nix::SampledDimension const *)arg1)->axis(arg2,arg3);
  *(std::vector< double > **)&jresult = new std::vector< double >((const std::vector< double > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_SampledDimension_1axis_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  nix::SampledDimension *arg1 = (nix::SampledDimension *) 0 ;
  size_t arg2 ;
  std::vector< double > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::SampledDimension **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = ((nix::SampledDimension const *)arg1)->axis(arg2);
  *(std::vector< double > **)&jresult = new std::vector< double >((const std::vector< double > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nixJNI_delete_1SampledDimension(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  nix::SampledDimension *arg1 = (nix::SampledDimension *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(nix::SampledDimension **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_new_1SetDimension_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  nix::SetDimension *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (nix::SetDimension *)new nix::SetDimension();
  *(nix::SetDimension **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_new_1SetDimension_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nix::SetDimension *arg1 = 0 ;
  nix::SetDimension *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::SetDimension **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "nix::SetDimension const & reference is null");
    return 0;
  } 
  result = (nix::SetDimension *)new nix::SetDimension((nix::SetDimension const &)*arg1);
  *(nix::SetDimension **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_SetDimension_1index(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nix::SetDimension *arg1 = (nix::SetDimension *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::SetDimension **)&jarg1; 
  result = ((nix::SetDimension const *)arg1)->index();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nixJNI_SetDimension_1dimensionType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  nix::SetDimension *arg1 = (nix::SetDimension *) 0 ;
  nix::DimensionType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::SetDimension **)&jarg1; 
  result = (nix::DimensionType)((nix::SetDimension const *)arg1)->dimensionType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_SetDimension_1labels_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nix::SetDimension *arg1 = (nix::SetDimension *) 0 ;
  std::vector< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::SetDimension **)&jarg1; 
  result = ((nix::SetDimension const *)arg1)->labels();
  *(std::vector< std::string > **)&jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nixJNI_SetDimension_1labels_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  nix::SetDimension *arg1 = (nix::SetDimension *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(nix::SetDimension **)&jarg1; 
  arg2 = *(std::vector< std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > const & reference is null");
    return ;
  } 
  (arg1)->labels((std::vector< std::string > const &)*arg2);
}


SWIGEXPORT void JNICALL Java_nixJNI_SetDimension_1removeLabels(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  nix::SetDimension *arg1 = (nix::SetDimension *) 0 ;
  boost::none_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  
  arg2 = boost::none;
  
  (void)jarg1_;
  arg1 = *(nix::SetDimension **)&jarg1; 
  (arg1)->labels(arg2);
}


SWIGEXPORT void JNICALL Java_nixJNI_delete_1SetDimension(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  nix::SetDimension *arg1 = (nix::SetDimension *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(nix::SetDimension **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_new_1RangeDimension_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  nix::RangeDimension *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (nix::RangeDimension *)new nix::RangeDimension();
  *(nix::RangeDimension **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_new_1RangeDimension_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nix::RangeDimension *arg1 = 0 ;
  nix::RangeDimension *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::RangeDimension **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "nix::RangeDimension const & reference is null");
    return 0;
  } 
  result = (nix::RangeDimension *)new nix::RangeDimension((nix::RangeDimension const &)*arg1);
  *(nix::RangeDimension **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_RangeDimension_1index(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nix::RangeDimension *arg1 = (nix::RangeDimension *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::RangeDimension **)&jarg1; 
  result = ((nix::RangeDimension const *)arg1)->index();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nixJNI_RangeDimension_1dimensionType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  nix::RangeDimension *arg1 = (nix::RangeDimension *) 0 ;
  nix::DimensionType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::RangeDimension **)&jarg1; 
  result = (nix::DimensionType)((nix::RangeDimension const *)arg1)->dimensionType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_RangeDimension_1label_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nix::RangeDimension *arg1 = (nix::RangeDimension *) 0 ;
  boost::optional< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::RangeDimension **)&jarg1; 
  result = ((nix::RangeDimension const *)arg1)->label();
  *(boost::optional< std::string > **)&jresult = new boost::optional< std::string >((const boost::optional< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nixJNI_RangeDimension_1label_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  nix::RangeDimension *arg1 = (nix::RangeDimension *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::RangeDimension **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->label((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_nixJNI_RangeDimension_1removeLabel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  nix::RangeDimension *arg1 = (nix::RangeDimension *) 0 ;
  nix::none_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  
  arg2 = boost::none;
  
  (void)jarg1_;
  arg1 = *(nix::RangeDimension **)&jarg1; 
  (arg1)->label(arg2);
}


SWIGEXPORT jlong JNICALL Java_nixJNI_RangeDimension_1unit_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nix::RangeDimension *arg1 = (nix::RangeDimension *) 0 ;
  boost::optional< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::RangeDimension **)&jarg1; 
  result = ((nix::RangeDimension const *)arg1)->unit();
  *(boost::optional< std::string > **)&jresult = new boost::optional< std::string >((const boost::optional< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nixJNI_RangeDimension_1unit_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  nix::RangeDimension *arg1 = (nix::RangeDimension *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::RangeDimension **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->unit((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_nixJNI_RangeDimension_1removeUnit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  nix::RangeDimension *arg1 = (nix::RangeDimension *) 0 ;
  nix::none_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  
  arg2 = boost::none;
  
  (void)jarg1_;
  arg1 = *(nix::RangeDimension **)&jarg1; 
  (arg1)->unit(arg2);
}


SWIGEXPORT jlong JNICALL Java_nixJNI_RangeDimension_1ticks_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nix::RangeDimension *arg1 = (nix::RangeDimension *) 0 ;
  std::vector< double > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::RangeDimension **)&jarg1; 
  result = ((nix::RangeDimension const *)arg1)->ticks();
  *(std::vector< double > **)&jresult = new std::vector< double >((const std::vector< double > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nixJNI_RangeDimension_1ticks_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  nix::RangeDimension *arg1 = (nix::RangeDimension *) 0 ;
  std::vector< double > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(nix::RangeDimension **)&jarg1; 
  arg2 = *(std::vector< double > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double > const & reference is null");
    return ;
  } 
  (arg1)->ticks((std::vector< double > const &)*arg2);
}


SWIGEXPORT jdouble JNICALL Java_nixJNI_RangeDimension_1tickAt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jdouble jresult = 0 ;
  nix::RangeDimension *arg1 = (nix::RangeDimension *) 0 ;
  size_t arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::RangeDimension **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (double)((nix::RangeDimension const *)arg1)->tickAt(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_RangeDimension_1indexOf(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jlong jresult = 0 ;
  nix::RangeDimension *arg1 = (nix::RangeDimension *) 0 ;
  double arg2 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::RangeDimension **)&jarg1; 
  arg2 = (double)jarg2; 
  result = ((nix::RangeDimension const *)arg1)->indexOf(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_RangeDimension_1axis_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  nix::RangeDimension *arg1 = (nix::RangeDimension *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  std::vector< double > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::RangeDimension **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  result = ((nix::RangeDimension const *)arg1)->axis(arg2,arg3);
  *(std::vector< double > **)&jresult = new std::vector< double >((const std::vector< double > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_RangeDimension_1axis_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  nix::RangeDimension *arg1 = (nix::RangeDimension *) 0 ;
  size_t arg2 ;
  std::vector< double > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::RangeDimension **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = ((nix::RangeDimension const *)arg1)->axis(arg2);
  *(std::vector< double > **)&jresult = new std::vector< double >((const std::vector< double > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nixJNI_delete_1RangeDimension(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  nix::RangeDimension *arg1 = (nix::RangeDimension *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(nix::RangeDimension **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_new_1Dimension_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  nix::Dimension *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (nix::Dimension *)new nix::Dimension();
  *(nix::Dimension **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_new_1Dimension_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nix::Dimension *arg1 = 0 ;
  nix::Dimension *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Dimension **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "nix::Dimension const & reference is null");
    return 0;
  } 
  result = (nix::Dimension *)new nix::Dimension((nix::Dimension const &)*arg1);
  *(nix::Dimension **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_new_1Dimension_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nix::SampledDimension *arg1 = 0 ;
  nix::Dimension *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::SampledDimension **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "nix::SampledDimension const & reference is null");
    return 0;
  } 
  result = (nix::Dimension *)new nix::Dimension((nix::SampledDimension const &)*arg1);
  *(nix::Dimension **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_new_1Dimension_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nix::RangeDimension *arg1 = 0 ;
  nix::Dimension *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::RangeDimension **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "nix::RangeDimension const & reference is null");
    return 0;
  } 
  result = (nix::Dimension *)new nix::Dimension((nix::RangeDimension const &)*arg1);
  *(nix::Dimension **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_new_1Dimension_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nix::SetDimension *arg1 = 0 ;
  nix::Dimension *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::SetDimension **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "nix::SetDimension const & reference is null");
    return 0;
  } 
  result = (nix::Dimension *)new nix::Dimension((nix::SetDimension const &)*arg1);
  *(nix::Dimension **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_Dimension_1index(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nix::Dimension *arg1 = (nix::Dimension *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Dimension **)&jarg1; 
  result = ((nix::Dimension const *)arg1)->index();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_nixJNI_Dimension_1dimensionType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  nix::Dimension *arg1 = (nix::Dimension *) 0 ;
  nix::DimensionType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Dimension **)&jarg1; 
  result = (nix::DimensionType)((nix::Dimension const *)arg1)->dimensionType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_Dimension_1asSetDimension(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nix::Dimension *arg1 = (nix::Dimension *) 0 ;
  nix::SetDimension result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Dimension **)&jarg1; 
  result = ((nix::Dimension const *)arg1)->asSetDimension();
  *(nix::SetDimension **)&jresult = new nix::SetDimension((const nix::SetDimension &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_Dimension_1asSampledDimension(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nix::Dimension *arg1 = (nix::Dimension *) 0 ;
  nix::SampledDimension result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Dimension **)&jarg1; 
  result = ((nix::Dimension const *)arg1)->asSampledDimension();
  *(nix::SampledDimension **)&jresult = new nix::SampledDimension((const nix::SampledDimension &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_Dimension_1asRangeDimension(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nix::Dimension *arg1 = (nix::Dimension *) 0 ;
  nix::RangeDimension result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Dimension **)&jarg1; 
  result = ((nix::Dimension const *)arg1)->asRangeDimension();
  *(nix::RangeDimension **)&jresult = new nix::RangeDimension((const nix::RangeDimension &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nixJNI_delete_1Dimension(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  nix::Dimension *arg1 = (nix::Dimension *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(nix::Dimension **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_new_1Source_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  nix::Source *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (nix::Source *)new nix::Source();
  *(nix::Source **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_new_1Source_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nix::Source *arg1 = 0 ;
  nix::Source *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Source **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "nix::Source const & reference is null");
    return 0;
  } 
  result = (nix::Source *)new nix::Source((nix::Source const &)*arg1);
  *(nix::Source **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_nixJNI_Source_1hasSource_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  nix::Source *arg1 = (nix::Source *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Source **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)((nix::Source const *)arg1)->hasSource((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_nixJNI_Source_1hasSource_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  nix::Source *arg1 = (nix::Source *) 0 ;
  nix::Source *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(nix::Source **)&jarg1; 
  arg2 = *(nix::Source **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "nix::Source const & reference is null");
    return 0;
  } 
  result = (bool)((nix::Source const *)arg1)->hasSource((nix::Source const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_Source_1getSource_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  nix::Source *arg1 = (nix::Source *) 0 ;
  std::string *arg2 = 0 ;
  nix::Source result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Source **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = ((nix::Source const *)arg1)->getSource((std::string const &)*arg2);
  *(nix::Source **)&jresult = new nix::Source((const nix::Source &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_Source_1getSource_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  nix::Source *arg1 = (nix::Source *) 0 ;
  size_t arg2 ;
  nix::Source result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Source **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = ((nix::Source const *)arg1)->getSource(arg2);
  *(nix::Source **)&jresult = new nix::Source((const nix::Source &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_Source_1sourceCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nix::Source *arg1 = (nix::Source *) 0 ;
  ndsize_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Source **)&jarg1; 
  result = (ndsize_t)((nix::Source const *)arg1)->sourceCount();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_Source_1sources_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  nix::Source *arg1 = (nix::Source *) 0 ;
  util::Filter< nix::Source >::type *arg2 = 0 ;
  std::vector< nix::Source > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Source **)&jarg1; 
  arg2 = *(util::Filter< nix::Source >::type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "util::Filter< nix::Source >::type const & reference is null");
    return 0;
  } 
  result = ((nix::Source const *)arg1)->sources((util::Filter< nix::Source >::type const &)*arg2);
  *(std::vector< nix::Source > **)&jresult = new std::vector< nix::Source >((const std::vector< nix::Source > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_Source_1sources_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nix::Source *arg1 = (nix::Source *) 0 ;
  std::vector< nix::Source > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Source **)&jarg1; 
  result = ((nix::Source const *)arg1)->sources();
  *(std::vector< nix::Source > **)&jresult = new std::vector< nix::Source >((const std::vector< nix::Source > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_Source_1findSources_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  nix::Source *arg1 = (nix::Source *) 0 ;
  util::Filter< nix::Source >::type *arg2 = 0 ;
  size_t arg3 ;
  std::vector< nix::Source > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Source **)&jarg1; 
  arg2 = *(util::Filter< nix::Source >::type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "util::Filter< nix::Source >::type const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  result = ((nix::Source const *)arg1)->findSources((util::Filter< nix::Source >::type const &)*arg2,arg3);
  *(std::vector< nix::Source > **)&jresult = new std::vector< nix::Source >((const std::vector< nix::Source > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_Source_1findSources_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  nix::Source *arg1 = (nix::Source *) 0 ;
  util::Filter< nix::Source >::type *arg2 = 0 ;
  std::vector< nix::Source > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Source **)&jarg1; 
  arg2 = *(util::Filter< nix::Source >::type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "util::Filter< nix::Source >::type const & reference is null");
    return 0;
  } 
  result = ((nix::Source const *)arg1)->findSources((util::Filter< nix::Source >::type const &)*arg2);
  *(std::vector< nix::Source > **)&jresult = new std::vector< nix::Source >((const std::vector< nix::Source > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_Source_1findSources_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nix::Source *arg1 = (nix::Source *) 0 ;
  std::vector< nix::Source > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Source **)&jarg1; 
  result = ((nix::Source const *)arg1)->findSources();
  *(std::vector< nix::Source > **)&jresult = new std::vector< nix::Source >((const std::vector< nix::Source > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_Source_1createSource(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  nix::Source *arg1 = (nix::Source *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  nix::Source result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Source **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (arg1)->createSource((std::string const &)*arg2,(std::string const &)*arg3);
  *(nix::Source **)&jresult = new nix::Source((const nix::Source &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_nixJNI_Source_1deleteSource_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  nix::Source *arg1 = (nix::Source *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Source **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->deleteSource((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_nixJNI_Source_1deleteSource_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  nix::Source *arg1 = (nix::Source *) 0 ;
  nix::Source *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(nix::Source **)&jarg1; 
  arg2 = *(nix::Source **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "nix::Source const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->deleteSource((nix::Source const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nixJNI_delete_1Source(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  nix::Source *arg1 = (nix::Source *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(nix::Source **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_new_1DataArray_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  nix::DataArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (nix::DataArray *)new nix::DataArray();
  *(nix::DataArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_new_1DataArray_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nix::DataArray *arg1 = 0 ;
  nix::DataArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::DataArray **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "nix::DataArray const & reference is null");
    return 0;
  } 
  result = (nix::DataArray *)new nix::DataArray((nix::DataArray const &)*arg1);
  *(nix::DataArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_DataArray_1label_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nix::DataArray *arg1 = (nix::DataArray *) 0 ;
  boost::optional< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::DataArray **)&jarg1; 
  result = ((nix::DataArray const *)arg1)->label();
  *(boost::optional< std::string > **)&jresult = new boost::optional< std::string >((const boost::optional< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nixJNI_DataArray_1label_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  nix::DataArray *arg1 = (nix::DataArray *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::DataArray **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->label((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_nixJNI_DataArray_1removeLabel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  nix::DataArray *arg1 = (nix::DataArray *) 0 ;
  nix::none_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  
  arg2 = boost::none;
  
  (void)jarg1_;
  arg1 = *(nix::DataArray **)&jarg1; 
  (arg1)->label(arg2);
}


SWIGEXPORT jlong JNICALL Java_nixJNI_DataArray_1unit_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nix::DataArray *arg1 = (nix::DataArray *) 0 ;
  boost::optional< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::DataArray **)&jarg1; 
  result = ((nix::DataArray const *)arg1)->unit();
  *(boost::optional< std::string > **)&jresult = new boost::optional< std::string >((const boost::optional< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nixJNI_DataArray_1removeUnit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  nix::DataArray *arg1 = (nix::DataArray *) 0 ;
  nix::none_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  
  arg2 = boost::none;
  
  (void)jarg1_;
  arg1 = *(nix::DataArray **)&jarg1; 
  (arg1)->unit(arg2);
}


SWIGEXPORT void JNICALL Java_nixJNI_DataArray_1unit_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  nix::DataArray *arg1 = (nix::DataArray *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::DataArray **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->unit((std::string const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_nixJNI_DataArray_1expansionOrigin_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nix::DataArray *arg1 = (nix::DataArray *) 0 ;
  boost::optional< double > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::DataArray **)&jarg1; 
  result = ((nix::DataArray const *)arg1)->expansionOrigin();
  *(boost::optional< double > **)&jresult = new boost::optional< double >((const boost::optional< double > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nixJNI_DataArray_1expansionOrigin_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  nix::DataArray *arg1 = (nix::DataArray *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::DataArray **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->expansionOrigin(arg2);
}


SWIGEXPORT void JNICALL Java_nixJNI_DataArray_1polynomCoefficients_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  nix::DataArray *arg1 = (nix::DataArray *) 0 ;
  std::vector< double > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(nix::DataArray **)&jarg1; 
  arg2 = *(std::vector< double > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double > const & reference is null");
    return ;
  } 
  (arg1)->polynomCoefficients((std::vector< double > const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_nixJNI_DataArray_1polynomCoefficients_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nix::DataArray *arg1 = (nix::DataArray *) 0 ;
  std::vector< double > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::DataArray **)&jarg1; 
  result = ((nix::DataArray const *)arg1)->polynomCoefficients();
  *(std::vector< double > **)&jresult = new std::vector< double >((const std::vector< double > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nixJNI_DataArray_1removePolynomCoefficients(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  nix::DataArray *arg1 = (nix::DataArray *) 0 ;
  nix::none_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  
  arg2 = boost::none;
  
  (void)jarg1_;
  arg1 = *(nix::DataArray **)&jarg1; 
  (arg1)->polynomCoefficients(arg2);
}


SWIGEXPORT jlong JNICALL Java_nixJNI_DataArray_1dimensions_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  nix::DataArray *arg1 = (nix::DataArray *) 0 ;
  util::Filter< nix::Dimension >::type *arg2 = 0 ;
  std::vector< nix::Dimension > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::DataArray **)&jarg1; 
  arg2 = *(util::Filter< nix::Dimension >::type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "util::Filter< nix::Dimension >::type const & reference is null");
    return 0;
  } 
  result = ((nix::DataArray const *)arg1)->dimensions((util::Filter< nix::Dimension >::type const &)*arg2);
  *(std::vector< nix::Dimension > **)&jresult = new std::vector< nix::Dimension >((const std::vector< nix::Dimension > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_DataArray_1dimensions_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nix::DataArray *arg1 = (nix::DataArray *) 0 ;
  std::vector< nix::Dimension > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::DataArray **)&jarg1; 
  result = ((nix::DataArray const *)arg1)->dimensions();
  *(std::vector< nix::Dimension > **)&jresult = new std::vector< nix::Dimension >((const std::vector< nix::Dimension > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_DataArray_1dimensionCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nix::DataArray *arg1 = (nix::DataArray *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::DataArray **)&jarg1; 
  result = ((nix::DataArray const *)arg1)->dimensionCount();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_DataArray_1getDimension(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  nix::DataArray *arg1 = (nix::DataArray *) 0 ;
  size_t arg2 ;
  nix::Dimension result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::DataArray **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = ((nix::DataArray const *)arg1)->getDimension(arg2);
  *(nix::Dimension **)&jresult = new nix::Dimension((const nix::Dimension &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_DataArray_1appendSetDimension(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nix::DataArray *arg1 = (nix::DataArray *) 0 ;
  nix::SetDimension result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::DataArray **)&jarg1; 
  result = (arg1)->appendSetDimension();
  *(nix::SetDimension **)&jresult = new nix::SetDimension((const nix::SetDimension &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_DataArray_1appendRangeDimension(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  nix::DataArray *arg1 = (nix::DataArray *) 0 ;
  std::vector< double > *arg2 = 0 ;
  nix::RangeDimension result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(nix::DataArray **)&jarg1; 
  arg2 = *(std::vector< double > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double > const & reference is null");
    return 0;
  } 
  result = (arg1)->appendRangeDimension((std::vector< double > const &)*arg2);
  *(nix::RangeDimension **)&jresult = new nix::RangeDimension((const nix::RangeDimension &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_DataArray_1appendSampledDimension(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jlong jresult = 0 ;
  nix::DataArray *arg1 = (nix::DataArray *) 0 ;
  double arg2 ;
  nix::SampledDimension result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::DataArray **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (arg1)->appendSampledDimension(arg2);
  *(nix::SampledDimension **)&jresult = new nix::SampledDimension((const nix::SampledDimension &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_DataArray_1createSetDimension(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  nix::DataArray *arg1 = (nix::DataArray *) 0 ;
  size_t arg2 ;
  nix::SetDimension result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::DataArray **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (arg1)->createSetDimension(arg2);
  *(nix::SetDimension **)&jresult = new nix::SetDimension((const nix::SetDimension &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_DataArray_1createRangeDimension(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  nix::DataArray *arg1 = (nix::DataArray *) 0 ;
  size_t arg2 ;
  std::vector< double > *arg3 = 0 ;
  nix::RangeDimension result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(nix::DataArray **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = *(std::vector< double > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double > const & reference is null");
    return 0;
  } 
  result = (arg1)->createRangeDimension(arg2,(std::vector< double > const &)*arg3);
  *(nix::RangeDimension **)&jresult = new nix::RangeDimension((const nix::RangeDimension &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_DataArray_1createSampledDimension(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jdouble jarg3) {
  jlong jresult = 0 ;
  nix::DataArray *arg1 = (nix::DataArray *) 0 ;
  size_t arg2 ;
  double arg3 ;
  nix::SampledDimension result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::DataArray **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (double)jarg3; 
  result = (arg1)->createSampledDimension(arg2,arg3);
  *(nix::SampledDimension **)&jresult = new nix::SampledDimension((const nix::SampledDimension &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_nixJNI_DataArray_1deleteDimension(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  nix::DataArray *arg1 = (nix::DataArray *) 0 ;
  size_t arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::DataArray **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (bool)(arg1)->deleteDimension(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nixJNI_DataArray_1getDataDirect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  nix::DataArray *arg1 = (nix::DataArray *) 0 ;
  nix::DataType arg2 ;
  void *arg3 = (void *) 0 ;
  NDSize *arg4 = 0 ;
  NDSize *arg5 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::DataArray **)&jarg1; 
  arg2 = (nix::DataType)jarg2; 
  arg3 = *(void **)&jarg3; 
  arg4 = *(NDSize **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "NDSize const & reference is null");
    return ;
  } 
  arg5 = *(NDSize **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "NDSize const & reference is null");
    return ;
  } 
  ((nix::DataArray const *)arg1)->getDataDirect(arg2,arg3,(NDSize const &)*arg4,(NDSize const &)*arg5);
}


SWIGEXPORT void JNICALL Java_nixJNI_DataArray_1setDataDirect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  nix::DataArray *arg1 = (nix::DataArray *) 0 ;
  nix::DataType arg2 ;
  void *arg3 = (void *) 0 ;
  NDSize *arg4 = 0 ;
  NDSize *arg5 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::DataArray **)&jarg1; 
  arg2 = (nix::DataType)jarg2; 
  arg3 = *(void **)&jarg3; 
  arg4 = *(NDSize **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "NDSize const & reference is null");
    return ;
  } 
  arg5 = *(NDSize **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "NDSize const & reference is null");
    return ;
  } 
  (arg1)->setDataDirect(arg2,(void const *)arg3,(NDSize const &)*arg4,(NDSize const &)*arg5);
}


SWIGEXPORT jlong JNICALL Java_nixJNI_DataArray_1dataExtent_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nix::DataArray *arg1 = (nix::DataArray *) 0 ;
  NDSize result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::DataArray **)&jarg1; 
  result = ((nix::DataArray const *)arg1)->dataExtent();
  *(NDSize **)&jresult = new NDSize((const NDSize &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nixJNI_DataArray_1dataExtent_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  nix::DataArray *arg1 = (nix::DataArray *) 0 ;
  NDSize *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::DataArray **)&jarg1; 
  arg2 = *(NDSize **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "NDSize const & reference is null");
    return ;
  } 
  (arg1)->dataExtent((NDSize const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_nixJNI_DataArray_1dataType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  nix::DataArray *arg1 = (nix::DataArray *) 0 ;
  nix::DataType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::DataArray **)&jarg1; 
  result = (nix::DataType)((nix::DataArray const *)arg1)->dataType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nixJNI_DataArray_1appendData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  nix::DataArray *arg1 = (nix::DataArray *) 0 ;
  nix::DataType arg2 ;
  void *arg3 = (void *) 0 ;
  NDSize *arg4 = 0 ;
  size_t arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::DataArray **)&jarg1; 
  arg2 = (nix::DataType)jarg2; 
  arg3 = *(void **)&jarg3; 
  arg4 = *(NDSize **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "NDSize const & reference is null");
    return ;
  } 
  arg5 = (size_t)jarg5; 
  (arg1)->appendData(arg2,(void const *)arg3,(NDSize const &)*arg4,arg5);
}


SWIGEXPORT void JNICALL Java_nixJNI_delete_1DataArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  nix::DataArray *arg1 = (nix::DataArray *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(nix::DataArray **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_new_1Feature_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  nix::Feature *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (nix::Feature *)new nix::Feature();
  *(nix::Feature **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_new_1Feature_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nix::Feature *arg1 = 0 ;
  nix::Feature *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Feature **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "nix::Feature const & reference is null");
    return 0;
  } 
  result = (nix::Feature *)new nix::Feature((nix::Feature const &)*arg1);
  *(nix::Feature **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nixJNI_Feature_1linkType_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  nix::Feature *arg1 = (nix::Feature *) 0 ;
  nix::LinkType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Feature **)&jarg1; 
  arg2 = (nix::LinkType)jarg2; 
  (arg1)->linkType(arg2);
}


SWIGEXPORT jint JNICALL Java_nixJNI_Feature_1linkType_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  nix::Feature *arg1 = (nix::Feature *) 0 ;
  nix::LinkType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Feature **)&jarg1; 
  result = (nix::LinkType)((nix::Feature const *)arg1)->linkType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nixJNI_Feature_1data_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  nix::Feature *arg1 = (nix::Feature *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Feature **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->data((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_nixJNI_Feature_1data_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  nix::Feature *arg1 = (nix::Feature *) 0 ;
  nix::DataArray *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(nix::Feature **)&jarg1; 
  arg2 = *(nix::DataArray **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "nix::DataArray const & reference is null");
    return ;
  } 
  (arg1)->data((nix::DataArray const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_nixJNI_Feature_1data_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nix::Feature *arg1 = (nix::Feature *) 0 ;
  nix::DataArray result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Feature **)&jarg1; 
  result = ((nix::Feature const *)arg1)->data();
  *(nix::DataArray **)&jresult = new nix::DataArray((const nix::DataArray &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nixJNI_delete_1Feature(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  nix::Feature *arg1 = (nix::Feature *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(nix::Feature **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_nixJNI_link_1type_1to_1string(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  nix::LinkType arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (nix::LinkType)jarg1; 
  result = nix::link_type_to_string(arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nixJNI_Value_1uncertainty_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  nix::Value *arg1 = (nix::Value *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Value **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->uncertainty = arg2;
}


SWIGEXPORT jdouble JNICALL Java_nixJNI_Value_1uncertainty_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  nix::Value *arg1 = (nix::Value *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Value **)&jarg1; 
  result = (double) ((arg1)->uncertainty);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nixJNI_Value_1reference_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  nix::Value *arg1 = (nix::Value *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Value **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->reference = *arg2;
}


SWIGEXPORT jstring JNICALL Java_nixJNI_Value_1reference_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  nix::Value *arg1 = (nix::Value *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Value **)&jarg1; 
  result = (std::string *) & ((arg1)->reference);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nixJNI_Value_1filename_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  nix::Value *arg1 = (nix::Value *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Value **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->filename = *arg2;
}


SWIGEXPORT jstring JNICALL Java_nixJNI_Value_1filename_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  nix::Value *arg1 = (nix::Value *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Value **)&jarg1; 
  result = (std::string *) & ((arg1)->filename);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nixJNI_Value_1encoder_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  nix::Value *arg1 = (nix::Value *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Value **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->encoder = *arg2;
}


SWIGEXPORT jstring JNICALL Java_nixJNI_Value_1encoder_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  nix::Value *arg1 = (nix::Value *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Value **)&jarg1; 
  result = (std::string *) & ((arg1)->encoder);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nixJNI_Value_1checksum_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  nix::Value *arg1 = (nix::Value *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Value **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->checksum = *arg2;
}


SWIGEXPORT jstring JNICALL Java_nixJNI_Value_1checksum_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  nix::Value *arg1 = (nix::Value *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Value **)&jarg1; 
  result = (std::string *) & ((arg1)->checksum);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_new_1Value_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  nix::Value *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (nix::Value *)new nix::Value();
  *(nix::Value **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_new_1Value_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  nix::Value *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (nix::Value *)new nix::Value((char const *)arg1);
  *(nix::Value **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_new_1Value_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nix::Value *arg1 = 0 ;
  nix::Value *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Value **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "nix::Value const & reference is null");
    return 0;
  } 
  result = (nix::Value *)new nix::Value((nix::Value const &)*arg1);
  *(nix::Value **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nixJNI_delete_1Value(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  nix::Value *arg1 = (nix::Value *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(nix::Value **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_nixJNI_Value_1set_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  nix::Value *arg1 = (nix::Value *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Value **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->set(arg2);
}


SWIGEXPORT void JNICALL Java_nixJNI_Value_1set_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  nix::Value *arg1 = (nix::Value *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Value **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  (arg1)->set(arg2);
}


SWIGEXPORT void JNICALL Java_nixJNI_Value_1set_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  nix::Value *arg1 = (nix::Value *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Value **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  (arg1)->set(arg2);
}


SWIGEXPORT void JNICALL Java_nixJNI_Value_1set_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  nix::Value *arg1 = (nix::Value *) 0 ;
  uint64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Value **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    for(i=0; i<sz; i++) {
      arg2 = (arg2 << 8) | (uint64_t)(unsigned char)bae[i];
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  (arg1)->set(arg2);
}


SWIGEXPORT void JNICALL Java_nixJNI_Value_1set_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  nix::Value *arg1 = (nix::Value *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Value **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->set(arg2);
}


SWIGEXPORT void JNICALL Java_nixJNI_Value_1set_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  nix::Value *arg1 = (nix::Value *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Value **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->set((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_nixJNI_Value_1get_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbooleanArray jarg2) {
  nix::Value *arg1 = (nix::Value *) 0 ;
  bool *arg2 = 0 ;
  bool temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Value **)&jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    temp2 = false;
    arg2 = &temp2; 
  }
  ((nix::Value const *)arg1)->get(*arg2);
  {
    jboolean jvalue = (jboolean)temp2;
    jenv->SetBooleanArrayRegion(jarg2, 0, 1, &jvalue);
  }
  
}


SWIGEXPORT void JNICALL Java_nixJNI_Value_1get_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jintArray jarg2) {
  nix::Value *arg1 = (nix::Value *) 0 ;
  int32_t *arg2 = 0 ;
  int32_t temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Value **)&jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    temp2 = (int32_t)0;
    arg2 = &temp2; 
  }
  ((nix::Value const *)arg1)->get(*arg2);
  {
    jint jvalue = (jint)temp2;
    jenv->SetIntArrayRegion(jarg2, 0, 1, &jvalue);
  }
  
}


SWIGEXPORT void JNICALL Java_nixJNI_Value_1get_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlongArray jarg2) {
  nix::Value *arg1 = (nix::Value *) 0 ;
  uint32_t *arg2 = 0 ;
  uint32_t temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Value **)&jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    temp2 = (uint32_t)0;
    arg2 = &temp2; 
  }
  ((nix::Value const *)arg1)->get(*arg2);
  {
    jlong jvalue = (jlong)temp2;
    jenv->SetLongArrayRegion(jarg2, 0, 1, &jvalue);
  }
  
}


SWIGEXPORT void JNICALL Java_nixJNI_Value_1get_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2) {
  nix::Value *arg1 = (nix::Value *) 0 ;
  uint64_t *arg2 = 0 ;
  uint64_t temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Value **)&jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    temp2 = (uint64_t)0;
    arg2 = &temp2; 
  }
  ((nix::Value const *)arg1)->get(*arg2);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(temp2>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jenv->SetObjectArrayElement(jarg2, 0, bigint);
  }
  
}


SWIGEXPORT void JNICALL Java_nixJNI_Value_1get_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdoubleArray jarg2) {
  nix::Value *arg1 = (nix::Value *) 0 ;
  double *arg2 = 0 ;
  double temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Value **)&jarg1; 
  {
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "array null");
      return ;
    }
    if (jenv->GetArrayLength(jarg2) == 0) {
      SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "Array must contain at least 1 element");
      return ;
    }
    temp2 = (double)0;
    arg2 = &temp2; 
  }
  ((nix::Value const *)arg1)->get(*arg2);
  {
    jdouble jvalue = (jdouble)temp2;
    jenv->SetDoubleArrayRegion(jarg2, 0, 1, &jvalue);
  }
  
}


SWIGEXPORT void JNICALL Java_nixJNI_Value_1get_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  nix::Value *arg1 = (nix::Value *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Value **)&jarg1; 
  arg2 = *(std::string **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string & reference is null");
    return ;
  } 
  ((nix::Value const *)arg1)->get(*arg2);
}


SWIGEXPORT jint JNICALL Java_nixJNI_Value_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  nix::Value *arg1 = (nix::Value *) 0 ;
  nix::DataType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Value **)&jarg1; 
  result = (nix::DataType)((nix::Value const *)arg1)->type();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nixJNI_Value_1swap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  nix::Value *arg1 = (nix::Value *) 0 ;
  nix::Value *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(nix::Value **)&jarg1; 
  arg2 = *(nix::Value **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "nix::Value & reference is null");
    return ;
  } 
  (arg1)->swap(*arg2);
}


SWIGEXPORT jboolean JNICALL Java_nixJNI_Value_1supports_1type(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jboolean jresult = 0 ;
  nix::DataType arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (nix::DataType)jarg1; 
  result = (bool)nix::Value::supports_type(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nixJNI_swap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  nix::Value *arg1 = 0 ;
  nix::Value *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(nix::Value **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "nix::Value & reference is null");
    return ;
  } 
  arg2 = *(nix::Value **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "nix::Value & reference is null");
    return ;
  } 
  nix::swap(*arg1,*arg2);
}


SWIGEXPORT jlong JNICALL Java_nixJNI_new_1Property_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  nix::Property *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (nix::Property *)new nix::Property();
  *(nix::Property **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_new_1Property_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nix::Property *arg1 = 0 ;
  nix::Property *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Property **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "nix::Property const & reference is null");
    return 0;
  } 
  result = (nix::Property *)new nix::Property((nix::Property const &)*arg1);
  *(nix::Property **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_nixJNI_Property_1name(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  nix::Property *arg1 = (nix::Property *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Property **)&jarg1; 
  result = ((nix::Property const *)arg1)->name();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nixJNI_Property_1definition_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  nix::Property *arg1 = (nix::Property *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Property **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->definition((std::string const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_nixJNI_Property_1definition_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nix::Property *arg1 = (nix::Property *) 0 ;
  boost::optional< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Property **)&jarg1; 
  result = ((nix::Property const *)arg1)->definition();
  *(boost::optional< std::string > **)&jresult = new boost::optional< std::string >((const boost::optional< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nixJNI_Property_1removeDefinition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  nix::Property *arg1 = (nix::Property *) 0 ;
  nix::none_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  
  arg2 = boost::none;
  
  (void)jarg1_;
  arg1 = *(nix::Property **)&jarg1; 
  (arg1)->definition(arg2);
}


SWIGEXPORT void JNICALL Java_nixJNI_Property_1mapping_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  nix::Property *arg1 = (nix::Property *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Property **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->mapping((std::string const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_nixJNI_Property_1mapping_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nix::Property *arg1 = (nix::Property *) 0 ;
  boost::optional< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Property **)&jarg1; 
  result = ((nix::Property const *)arg1)->mapping();
  *(boost::optional< std::string > **)&jresult = new boost::optional< std::string >((const boost::optional< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nixJNI_Property_1removeMapping(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  nix::Property *arg1 = (nix::Property *) 0 ;
  boost::none_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  
  arg2 = boost::none;
  
  (void)jarg1_;
  arg1 = *(nix::Property **)&jarg1; 
  (arg1)->mapping(arg2);
}


SWIGEXPORT jint JNICALL Java_nixJNI_Property_1dataType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  nix::Property *arg1 = (nix::Property *) 0 ;
  nix::DataType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Property **)&jarg1; 
  result = (nix::DataType)((nix::Property const *)arg1)->dataType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nixJNI_Property_1unit_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  nix::Property *arg1 = (nix::Property *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Property **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->unit((std::string const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_nixJNI_Property_1unit_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nix::Property *arg1 = (nix::Property *) 0 ;
  boost::optional< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Property **)&jarg1; 
  result = ((nix::Property const *)arg1)->unit();
  *(boost::optional< std::string > **)&jresult = new boost::optional< std::string >((const boost::optional< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nixJNI_Property_1removeUnit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  nix::Property *arg1 = (nix::Property *) 0 ;
  boost::none_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  
  arg2 = boost::none;
  
  (void)jarg1_;
  arg1 = *(nix::Property **)&jarg1; 
  (arg1)->unit(arg2);
}


SWIGEXPORT void JNICALL Java_nixJNI_Property_1deleteValues(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  nix::Property *arg1 = (nix::Property *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Property **)&jarg1; 
  (arg1)->deleteValues();
}


SWIGEXPORT jlong JNICALL Java_nixJNI_Property_1valueCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nix::Property *arg1 = (nix::Property *) 0 ;
  ndsize_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Property **)&jarg1; 
  result = (ndsize_t)((nix::Property const *)arg1)->valueCount();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nixJNI_Property_1values_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  nix::Property *arg1 = (nix::Property *) 0 ;
  std::vector< nix::Value > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(nix::Property **)&jarg1; 
  arg2 = *(std::vector< nix::Value > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< nix::Value > const & reference is null");
    return ;
  } 
  (arg1)->values((std::vector< nix::Value > const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_nixJNI_Property_1values_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nix::Property *arg1 = (nix::Property *) 0 ;
  std::vector< nix::Value > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Property **)&jarg1; 
  result = ((nix::Property const *)arg1)->values();
  *(std::vector< nix::Value > **)&jresult = new std::vector< nix::Value >((const std::vector< nix::Value > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nixJNI_Property_1removeValues(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  nix::Property *arg1 = (nix::Property *) 0 ;
  boost::none_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  
  arg2 = boost::none;
  
  (void)jarg1_;
  arg1 = *(nix::Property **)&jarg1; 
  (arg1)->values(arg2);
}


SWIGEXPORT jint JNICALL Java_nixJNI_Property_1compare(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  nix::Property *arg1 = (nix::Property *) 0 ;
  nix::Property *arg2 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(nix::Property **)&jarg1; 
  arg2 = *(nix::Property **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "nix::Property const & reference is null");
    return 0;
  } 
  result = (int)((nix::Property const *)arg1)->compare((nix::Property const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nixJNI_delete_1Property(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  nix::Property *arg1 = (nix::Property *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(nix::Property **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_new_1Section_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  nix::Section *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (nix::Section *)new nix::Section();
  *(nix::Section **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_new_1Section_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nix::Section *arg1 = 0 ;
  nix::Section *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Section **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "nix::Section const & reference is null");
    return 0;
  } 
  result = (nix::Section *)new nix::Section((nix::Section const &)*arg1);
  *(nix::Section **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nixJNI_Section_1repository_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  nix::Section *arg1 = (nix::Section *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Section **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->repository((std::string const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_nixJNI_Section_1repository_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nix::Section *arg1 = (nix::Section *) 0 ;
  boost::optional< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Section **)&jarg1; 
  result = ((nix::Section const *)arg1)->repository();
  *(boost::optional< std::string > **)&jresult = new boost::optional< std::string >((const boost::optional< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nixJNI_Section_1removeRepository(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  nix::Section *arg1 = (nix::Section *) 0 ;
  boost::none_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  
  arg2 = boost::none;
  
  (void)jarg1_;
  arg1 = *(nix::Section **)&jarg1; 
  (arg1)->repository(arg2);
}


SWIGEXPORT void JNICALL Java_nixJNI_Section_1link_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  nix::Section *arg1 = (nix::Section *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Section **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->link((std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_nixJNI_Section_1link_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  nix::Section *arg1 = (nix::Section *) 0 ;
  nix::Section *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(nix::Section **)&jarg1; 
  arg2 = *(nix::Section **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "nix::Section const & reference is null");
    return ;
  } 
  (arg1)->link((nix::Section const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_nixJNI_Section_1link_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nix::Section *arg1 = (nix::Section *) 0 ;
  nix::Section result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Section **)&jarg1; 
  result = ((nix::Section const *)arg1)->link();
  *(nix::Section **)&jresult = new nix::Section((const nix::Section &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nixJNI_Section_1removeLink(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  nix::Section *arg1 = (nix::Section *) 0 ;
  boost::none_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  
  arg2 = boost::none;
  
  (void)jarg1_;
  arg1 = *(nix::Section **)&jarg1; 
  (arg1)->link(arg2);
}


SWIGEXPORT void JNICALL Java_nixJNI_Section_1mapping_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  nix::Section *arg1 = (nix::Section *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Section **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->mapping((std::string const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_nixJNI_Section_1mapping_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nix::Section *arg1 = (nix::Section *) 0 ;
  boost::optional< std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Section **)&jarg1; 
  result = ((nix::Section const *)arg1)->mapping();
  *(boost::optional< std::string > **)&jresult = new boost::optional< std::string >((const boost::optional< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nixJNI_Section_1removeMapping(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  nix::Section *arg1 = (nix::Section *) 0 ;
  boost::none_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  
  arg2 = boost::none;
  
  (void)jarg1_;
  arg1 = *(nix::Section **)&jarg1; 
  (arg1)->mapping(arg2);
}


SWIGEXPORT jlong JNICALL Java_nixJNI_Section_1parent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nix::Section *arg1 = (nix::Section *) 0 ;
  nix::Section result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Section **)&jarg1; 
  result = ((nix::Section const *)arg1)->parent();
  *(nix::Section **)&jresult = new nix::Section((const nix::Section &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_Section_1sectionCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nix::Section *arg1 = (nix::Section *) 0 ;
  ndsize_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Section **)&jarg1; 
  result = (ndsize_t)((nix::Section const *)arg1)->sectionCount();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_nixJNI_Section_1hasSection_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  nix::Section *arg1 = (nix::Section *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Section **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)((nix::Section const *)arg1)->hasSection((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_nixJNI_Section_1hasSection_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  nix::Section *arg1 = (nix::Section *) 0 ;
  nix::Section *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(nix::Section **)&jarg1; 
  arg2 = *(nix::Section **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "nix::Section const & reference is null");
    return 0;
  } 
  result = (bool)((nix::Section const *)arg1)->hasSection((nix::Section const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_Section_1getSection_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  nix::Section *arg1 = (nix::Section *) 0 ;
  std::string *arg2 = 0 ;
  nix::Section result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Section **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = ((nix::Section const *)arg1)->getSection((std::string const &)*arg2);
  *(nix::Section **)&jresult = new nix::Section((const nix::Section &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_Section_1getSection_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  nix::Section *arg1 = (nix::Section *) 0 ;
  size_t arg2 ;
  nix::Section result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Section **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = ((nix::Section const *)arg1)->getSection(arg2);
  *(nix::Section **)&jresult = new nix::Section((const nix::Section &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_Section_1sections_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  nix::Section *arg1 = (nix::Section *) 0 ;
  util::Filter< nix::Section >::type *arg2 = 0 ;
  std::vector< nix::Section > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Section **)&jarg1; 
  arg2 = *(util::Filter< nix::Section >::type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "util::Filter< nix::Section >::type const & reference is null");
    return 0;
  } 
  result = ((nix::Section const *)arg1)->sections((util::Filter< nix::Section >::type const &)*arg2);
  *(std::vector< nix::Section > **)&jresult = new std::vector< nix::Section >((const std::vector< nix::Section > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_Section_1sections_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nix::Section *arg1 = (nix::Section *) 0 ;
  std::vector< nix::Section > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Section **)&jarg1; 
  result = ((nix::Section const *)arg1)->sections();
  *(std::vector< nix::Section > **)&jresult = new std::vector< nix::Section >((const std::vector< nix::Section > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_Section_1findSections_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  nix::Section *arg1 = (nix::Section *) 0 ;
  util::Filter< nix::Section >::type *arg2 = 0 ;
  size_t arg3 ;
  std::vector< nix::Section > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Section **)&jarg1; 
  arg2 = *(util::Filter< nix::Section >::type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "util::Filter< nix::Section >::type const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  result = ((nix::Section const *)arg1)->findSections((util::Filter< nix::Section >::type const &)*arg2,arg3);
  *(std::vector< nix::Section > **)&jresult = new std::vector< nix::Section >((const std::vector< nix::Section > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_Section_1findSections_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  nix::Section *arg1 = (nix::Section *) 0 ;
  util::Filter< nix::Section >::type *arg2 = 0 ;
  std::vector< nix::Section > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Section **)&jarg1; 
  arg2 = *(util::Filter< nix::Section >::type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "util::Filter< nix::Section >::type const & reference is null");
    return 0;
  } 
  result = ((nix::Section const *)arg1)->findSections((util::Filter< nix::Section >::type const &)*arg2);
  *(std::vector< nix::Section > **)&jresult = new std::vector< nix::Section >((const std::vector< nix::Section > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_Section_1findSections_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nix::Section *arg1 = (nix::Section *) 0 ;
  std::vector< nix::Section > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Section **)&jarg1; 
  result = ((nix::Section const *)arg1)->findSections();
  *(std::vector< nix::Section > **)&jresult = new std::vector< nix::Section >((const std::vector< nix::Section > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_Section_1findRelated_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  nix::Section *arg1 = (nix::Section *) 0 ;
  util::Filter< nix::Section >::type *arg2 = 0 ;
  std::vector< nix::Section > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Section **)&jarg1; 
  arg2 = *(util::Filter< nix::Section >::type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "util::Filter< nix::Section >::type const & reference is null");
    return 0;
  } 
  result = ((nix::Section const *)arg1)->findRelated((util::Filter< nix::Section >::type const &)*arg2);
  *(std::vector< nix::Section > **)&jresult = new std::vector< nix::Section >((const std::vector< nix::Section > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_Section_1findRelated_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nix::Section *arg1 = (nix::Section *) 0 ;
  std::vector< nix::Section > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Section **)&jarg1; 
  result = ((nix::Section const *)arg1)->findRelated();
  *(std::vector< nix::Section > **)&jresult = new std::vector< nix::Section >((const std::vector< nix::Section > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_Section_1createSection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  nix::Section *arg1 = (nix::Section *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  nix::Section result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Section **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (arg1)->createSection((std::string const &)*arg2,(std::string const &)*arg3);
  *(nix::Section **)&jresult = new nix::Section((const nix::Section &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_nixJNI_Section_1deleteSection_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  nix::Section *arg1 = (nix::Section *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Section **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->deleteSection((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_nixJNI_Section_1deleteSection_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  nix::Section *arg1 = (nix::Section *) 0 ;
  nix::Section *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(nix::Section **)&jarg1; 
  arg2 = *(nix::Section **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "nix::Section const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->deleteSection((nix::Section const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_Section_1propertyCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nix::Section *arg1 = (nix::Section *) 0 ;
  ndsize_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Section **)&jarg1; 
  result = (ndsize_t)((nix::Section const *)arg1)->propertyCount();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_nixJNI_Section_1hasProperty_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  nix::Section *arg1 = (nix::Section *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Section **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)((nix::Section const *)arg1)->hasProperty((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_nixJNI_Section_1hasProperty_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  nix::Section *arg1 = (nix::Section *) 0 ;
  nix::Property *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(nix::Section **)&jarg1; 
  arg2 = *(nix::Property **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "nix::Property const & reference is null");
    return 0;
  } 
  result = (bool)((nix::Section const *)arg1)->hasProperty((nix::Property const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_Section_1getProperty_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  nix::Section *arg1 = (nix::Section *) 0 ;
  std::string *arg2 = 0 ;
  nix::Property result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Section **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = ((nix::Section const *)arg1)->getProperty((std::string const &)*arg2);
  *(nix::Property **)&jresult = new nix::Property((const nix::Property &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_Section_1getProperty_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  nix::Section *arg1 = (nix::Section *) 0 ;
  size_t arg2 ;
  nix::Property result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Section **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = ((nix::Section const *)arg1)->getProperty(arg2);
  *(nix::Property **)&jresult = new nix::Property((const nix::Property &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_Section_1properties_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  nix::Section *arg1 = (nix::Section *) 0 ;
  util::Filter< nix::Property >::type *arg2 = 0 ;
  std::vector< nix::Property > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Section **)&jarg1; 
  arg2 = *(util::Filter< nix::Property >::type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "util::Filter< nix::Property >::type const & reference is null");
    return 0;
  } 
  result = ((nix::Section const *)arg1)->properties((util::Filter< nix::Property >::type const &)*arg2);
  *(std::vector< nix::Property > **)&jresult = new std::vector< nix::Property >((const std::vector< nix::Property > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_Section_1properties_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nix::Section *arg1 = (nix::Section *) 0 ;
  std::vector< nix::Property > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Section **)&jarg1; 
  result = ((nix::Section const *)arg1)->properties();
  *(std::vector< nix::Property > **)&jresult = new std::vector< nix::Property >((const std::vector< nix::Property > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_Section_1inheritedProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nix::Section *arg1 = (nix::Section *) 0 ;
  std::vector< nix::Property > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Section **)&jarg1; 
  result = ((nix::Section const *)arg1)->inheritedProperties();
  *(std::vector< nix::Property > **)&jresult = new std::vector< nix::Property >((const std::vector< nix::Property > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_Section_1createProperty_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jlong jresult = 0 ;
  nix::Section *arg1 = (nix::Section *) 0 ;
  std::string *arg2 = 0 ;
  nix::DataType *arg3 = 0 ;
  nix::DataType temp3 ;
  nix::Property result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Section **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  temp3 = (nix::DataType)jarg3; 
  arg3 = &temp3; 
  result = (arg1)->createProperty((std::string const &)*arg2,(nix::DataType const &)*arg3);
  *(nix::Property **)&jresult = new nix::Property((const nix::Property &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_Section_1createProperty_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  nix::Section *arg1 = (nix::Section *) 0 ;
  std::string *arg2 = 0 ;
  nix::Value *arg3 = 0 ;
  nix::Property result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(nix::Section **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(nix::Value **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "nix::Value const & reference is null");
    return 0;
  } 
  result = (arg1)->createProperty((std::string const &)*arg2,(nix::Value const &)*arg3);
  *(nix::Property **)&jresult = new nix::Property((const nix::Property &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_Section_1createProperty_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  nix::Section *arg1 = (nix::Section *) 0 ;
  std::string *arg2 = 0 ;
  std::vector< nix::Value > *arg3 = 0 ;
  nix::Property result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(nix::Section **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(std::vector< nix::Value > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< nix::Value > const & reference is null");
    return 0;
  } 
  result = (arg1)->createProperty((std::string const &)*arg2,(std::vector< nix::Value > const &)*arg3);
  *(nix::Property **)&jresult = new nix::Property((const nix::Property &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_nixJNI_Section_1deleteProperty_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  nix::Section *arg1 = (nix::Section *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Section **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->deleteProperty((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_nixJNI_Section_1deleteProperty_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  nix::Section *arg1 = (nix::Section *) 0 ;
  nix::Property *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(nix::Section **)&jarg1; 
  arg2 = *(nix::Property **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "nix::Property const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->deleteProperty((nix::Property const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nixJNI_delete_1Section(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  nix::Section *arg1 = (nix::Section *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(nix::Section **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_new_1Block_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  nix::Block *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (nix::Block *)new nix::Block();
  *(nix::Block **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_new_1Block_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nix::Block *arg1 = 0 ;
  nix::Block *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Block **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "nix::Block const & reference is null");
    return 0;
  } 
  result = (nix::Block *)new nix::Block((nix::Block const &)*arg1);
  *(nix::Block **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_nixJNI_Block_1hasSource_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  nix::Block *arg1 = (nix::Block *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Block **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)((nix::Block const *)arg1)->hasSource((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_nixJNI_Block_1hasSource_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  nix::Block *arg1 = (nix::Block *) 0 ;
  nix::Source *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(nix::Block **)&jarg1; 
  arg2 = *(nix::Source **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "nix::Source const & reference is null");
    return 0;
  } 
  result = (bool)((nix::Block const *)arg1)->hasSource((nix::Source const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_Block_1getSource_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  nix::Block *arg1 = (nix::Block *) 0 ;
  std::string *arg2 = 0 ;
  nix::Source result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Block **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = ((nix::Block const *)arg1)->getSource((std::string const &)*arg2);
  *(nix::Source **)&jresult = new nix::Source((const nix::Source &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_Block_1getSource_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  nix::Block *arg1 = (nix::Block *) 0 ;
  size_t arg2 ;
  nix::Source result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Block **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = ((nix::Block const *)arg1)->getSource(arg2);
  *(nix::Source **)&jresult = new nix::Source((const nix::Source &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_Block_1sourceCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nix::Block *arg1 = (nix::Block *) 0 ;
  ndsize_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Block **)&jarg1; 
  result = (ndsize_t)((nix::Block const *)arg1)->sourceCount();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_Block_1sources_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  nix::Block *arg1 = (nix::Block *) 0 ;
  util::Filter< nix::Source >::type *arg2 = 0 ;
  std::vector< nix::Source > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Block **)&jarg1; 
  arg2 = *(util::Filter< nix::Source >::type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "util::Filter< nix::Source >::type const & reference is null");
    return 0;
  } 
  result = ((nix::Block const *)arg1)->sources((util::Filter< nix::Source >::type const &)*arg2);
  *(std::vector< nix::Source > **)&jresult = new std::vector< nix::Source >((const std::vector< nix::Source > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_Block_1sources_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nix::Block *arg1 = (nix::Block *) 0 ;
  std::vector< nix::Source > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Block **)&jarg1; 
  result = ((nix::Block const *)arg1)->sources();
  *(std::vector< nix::Source > **)&jresult = new std::vector< nix::Source >((const std::vector< nix::Source > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_Block_1findSources_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  nix::Block *arg1 = (nix::Block *) 0 ;
  util::Filter< nix::Source >::type *arg2 = 0 ;
  size_t arg3 ;
  std::vector< nix::Source > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Block **)&jarg1; 
  arg2 = *(util::Filter< nix::Source >::type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "util::Filter< nix::Source >::type const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  result = ((nix::Block const *)arg1)->findSources((util::Filter< nix::Source >::type const &)*arg2,arg3);
  *(std::vector< nix::Source > **)&jresult = new std::vector< nix::Source >((const std::vector< nix::Source > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_Block_1findSources_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  nix::Block *arg1 = (nix::Block *) 0 ;
  util::Filter< nix::Source >::type *arg2 = 0 ;
  std::vector< nix::Source > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Block **)&jarg1; 
  arg2 = *(util::Filter< nix::Source >::type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "util::Filter< nix::Source >::type const & reference is null");
    return 0;
  } 
  result = ((nix::Block const *)arg1)->findSources((util::Filter< nix::Source >::type const &)*arg2);
  *(std::vector< nix::Source > **)&jresult = new std::vector< nix::Source >((const std::vector< nix::Source > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_Block_1findSources_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nix::Block *arg1 = (nix::Block *) 0 ;
  std::vector< nix::Source > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Block **)&jarg1; 
  result = ((nix::Block const *)arg1)->findSources();
  *(std::vector< nix::Source > **)&jresult = new std::vector< nix::Source >((const std::vector< nix::Source > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_Block_1createSource(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  nix::Block *arg1 = (nix::Block *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  nix::Source result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Block **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (arg1)->createSource((std::string const &)*arg2,(std::string const &)*arg3);
  *(nix::Source **)&jresult = new nix::Source((const nix::Source &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_nixJNI_Block_1deleteSource_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  nix::Block *arg1 = (nix::Block *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Block **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->deleteSource((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_nixJNI_Block_1deleteSource_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  nix::Block *arg1 = (nix::Block *) 0 ;
  nix::Source *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(nix::Block **)&jarg1; 
  arg2 = *(nix::Source **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "nix::Source const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->deleteSource((nix::Source const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_nixJNI_Block_1hasDataArray_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  nix::Block *arg1 = (nix::Block *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Block **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)((nix::Block const *)arg1)->hasDataArray((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_nixJNI_Block_1hasDataArray_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  nix::Block *arg1 = (nix::Block *) 0 ;
  nix::DataArray *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(nix::Block **)&jarg1; 
  arg2 = *(nix::DataArray **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "nix::DataArray const & reference is null");
    return 0;
  } 
  result = (bool)((nix::Block const *)arg1)->hasDataArray((nix::DataArray const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_Block_1getDataArray_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  nix::Block *arg1 = (nix::Block *) 0 ;
  std::string *arg2 = 0 ;
  nix::DataArray result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Block **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = ((nix::Block const *)arg1)->getDataArray((std::string const &)*arg2);
  *(nix::DataArray **)&jresult = new nix::DataArray((const nix::DataArray &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_Block_1getDataArray_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  nix::Block *arg1 = (nix::Block *) 0 ;
  size_t arg2 ;
  nix::DataArray result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Block **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = ((nix::Block const *)arg1)->getDataArray(arg2);
  *(nix::DataArray **)&jresult = new nix::DataArray((const nix::DataArray &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_Block_1dataArrays_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  nix::Block *arg1 = (nix::Block *) 0 ;
  util::AcceptAll< nix::DataArray >::type *arg2 = 0 ;
  std::vector< nix::DataArray > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Block **)&jarg1; 
  arg2 = *(util::AcceptAll< nix::DataArray >::type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "util::AcceptAll< nix::DataArray >::type const & reference is null");
    return 0;
  } 
  result = ((nix::Block const *)arg1)->dataArrays((util::AcceptAll< nix::DataArray >::type const &)*arg2);
  *(std::vector< nix::DataArray > **)&jresult = new std::vector< nix::DataArray >((const std::vector< nix::DataArray > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_Block_1dataArrays_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nix::Block *arg1 = (nix::Block *) 0 ;
  std::vector< nix::DataArray > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Block **)&jarg1; 
  result = ((nix::Block const *)arg1)->dataArrays();
  *(std::vector< nix::DataArray > **)&jresult = new std::vector< nix::DataArray >((const std::vector< nix::DataArray > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_Block_1dataArrayCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nix::Block *arg1 = (nix::Block *) 0 ;
  ndsize_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Block **)&jarg1; 
  result = (ndsize_t)((nix::Block const *)arg1)->dataArrayCount();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_Block_1createDataArray(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  nix::Block *arg1 = (nix::Block *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  nix::DataType arg4 ;
  NDSize *arg5 = 0 ;
  nix::DataArray result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Block **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (nix::DataType)jarg4; 
  arg5 = *(NDSize **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "NDSize const & reference is null");
    return 0;
  } 
  result = (arg1)->createDataArray((std::string const &)*arg2,(std::string const &)*arg3,arg4,(NDSize const &)*arg5);
  *(nix::DataArray **)&jresult = new nix::DataArray((const nix::DataArray &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_nixJNI_Block_1deleteDataArray_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  nix::Block *arg1 = (nix::Block *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Block **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->deleteDataArray((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_nixJNI_Block_1deleteDataArray_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  nix::Block *arg1 = (nix::Block *) 0 ;
  nix::DataArray *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(nix::Block **)&jarg1; 
  arg2 = *(nix::DataArray **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "nix::DataArray const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->deleteDataArray((nix::DataArray const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_nixJNI_Block_1hasTag_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  nix::Block *arg1 = (nix::Block *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Block **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)((nix::Block const *)arg1)->hasTag((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_nixJNI_Block_1hasTag_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  nix::Block *arg1 = (nix::Block *) 0 ;
  Tag *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Block **)&jarg1; 
  arg2 = *(Tag **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Tag const & reference is null");
    return 0;
  } 
  result = (bool)((nix::Block const *)arg1)->hasTag((Tag const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_Block_1getTag_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  nix::Block *arg1 = (nix::Block *) 0 ;
  std::string *arg2 = 0 ;
  Tag result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Block **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = ((nix::Block const *)arg1)->getTag((std::string const &)*arg2);
  *(Tag **)&jresult = new Tag((const Tag &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_Block_1getTag_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  nix::Block *arg1 = (nix::Block *) 0 ;
  size_t arg2 ;
  Tag result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Block **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = ((nix::Block const *)arg1)->getTag(arg2);
  *(Tag **)&jresult = new Tag((const Tag &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_Block_1tags_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  nix::Block *arg1 = (nix::Block *) 0 ;
  util::Filter< Tag >::type *arg2 = 0 ;
  SwigValueWrapper< std::vector< Tag > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Block **)&jarg1; 
  arg2 = *(util::Filter< Tag >::type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "util::Filter< Tag >::type const & reference is null");
    return 0;
  } 
  result = ((nix::Block const *)arg1)->tags((util::Filter< Tag >::type const &)*arg2);
  *(std::vector< Tag > **)&jresult = new std::vector< Tag >((const std::vector< Tag > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_Block_1tags_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nix::Block *arg1 = (nix::Block *) 0 ;
  SwigValueWrapper< std::vector< Tag > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Block **)&jarg1; 
  result = ((nix::Block const *)arg1)->tags();
  *(std::vector< Tag > **)&jresult = new std::vector< Tag >((const std::vector< Tag > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_Block_1tagCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nix::Block *arg1 = (nix::Block *) 0 ;
  ndsize_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Block **)&jarg1; 
  result = (ndsize_t)((nix::Block const *)arg1)->tagCount();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_Block_1createTag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  nix::Block *arg1 = (nix::Block *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::vector< double > *arg4 = 0 ;
  Tag result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(nix::Block **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = *(std::vector< double > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< double > const & reference is null");
    return 0;
  } 
  result = (arg1)->createTag((std::string const &)*arg2,(std::string const &)*arg3,(std::vector< double > const &)*arg4);
  *(Tag **)&jresult = new Tag((const Tag &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_nixJNI_Block_1deleteTag_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  nix::Block *arg1 = (nix::Block *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Block **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->deleteTag((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_nixJNI_Block_1deleteTag_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  nix::Block *arg1 = (nix::Block *) 0 ;
  Tag *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Block **)&jarg1; 
  arg2 = *(Tag **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Tag const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->deleteTag((Tag const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_nixJNI_Block_1hasMultiTag_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  nix::Block *arg1 = (nix::Block *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Block **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)((nix::Block const *)arg1)->hasMultiTag((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_nixJNI_Block_1hasMultiTag_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  nix::Block *arg1 = (nix::Block *) 0 ;
  MultiTag *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Block **)&jarg1; 
  arg2 = *(MultiTag **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "MultiTag const & reference is null");
    return 0;
  } 
  result = (bool)((nix::Block const *)arg1)->hasMultiTag((MultiTag const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_Block_1getMultiTag_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  nix::Block *arg1 = (nix::Block *) 0 ;
  std::string *arg2 = 0 ;
  MultiTag result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Block **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = ((nix::Block const *)arg1)->getMultiTag((std::string const &)*arg2);
  *(MultiTag **)&jresult = new MultiTag((const MultiTag &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_Block_1getMultiTag_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  nix::Block *arg1 = (nix::Block *) 0 ;
  size_t arg2 ;
  MultiTag result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Block **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = ((nix::Block const *)arg1)->getMultiTag(arg2);
  *(MultiTag **)&jresult = new MultiTag((const MultiTag &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_Block_1multiTags_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  nix::Block *arg1 = (nix::Block *) 0 ;
  util::AcceptAll< MultiTag >::type *arg2 = 0 ;
  SwigValueWrapper< std::vector< MultiTag > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Block **)&jarg1; 
  arg2 = *(util::AcceptAll< MultiTag >::type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "util::AcceptAll< MultiTag >::type const & reference is null");
    return 0;
  } 
  result = ((nix::Block const *)arg1)->multiTags((util::AcceptAll< MultiTag >::type const &)*arg2);
  *(std::vector< MultiTag > **)&jresult = new std::vector< MultiTag >((const std::vector< MultiTag > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_Block_1multiTags_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nix::Block *arg1 = (nix::Block *) 0 ;
  SwigValueWrapper< std::vector< MultiTag > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Block **)&jarg1; 
  result = ((nix::Block const *)arg1)->multiTags();
  *(std::vector< MultiTag > **)&jresult = new std::vector< MultiTag >((const std::vector< MultiTag > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_Block_1multiTagCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nix::Block *arg1 = (nix::Block *) 0 ;
  ndsize_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Block **)&jarg1; 
  result = (ndsize_t)((nix::Block const *)arg1)->multiTagCount();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_Block_1createMultiTag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  nix::Block *arg1 = (nix::Block *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  nix::DataArray *arg4 = 0 ;
  MultiTag result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(nix::Block **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = *(nix::DataArray **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "nix::DataArray const & reference is null");
    return 0;
  } 
  result = (arg1)->createMultiTag((std::string const &)*arg2,(std::string const &)*arg3,(nix::DataArray const &)*arg4);
  *(MultiTag **)&jresult = new MultiTag((const MultiTag &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_nixJNI_Block_1deleteMultiTag_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  nix::Block *arg1 = (nix::Block *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Block **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->deleteMultiTag((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_nixJNI_Block_1deleteMultiTag_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  nix::Block *arg1 = (nix::Block *) 0 ;
  MultiTag *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::Block **)&jarg1; 
  arg2 = *(MultiTag **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "MultiTag const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->deleteMultiTag((MultiTag const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nixJNI_delete_1Block(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  nix::Block *arg1 = (nix::Block *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(nix::Block **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_new_1File_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  nix::File *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (nix::File *)new nix::File();
  *(nix::File **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_new_1File_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nix::File *arg1 = 0 ;
  nix::File *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::File **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "nix::File const & reference is null");
    return 0;
  } 
  result = (nix::File *)new nix::File((nix::File const &)*arg1);
  *(nix::File **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_File_1open_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  nix::FileMode arg2 ;
  nix::Implementation arg3 ;
  nix::File result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (nix::FileMode)jarg2; 
  arg3 = (nix::Implementation)jarg3; 
  result = nix::File::open((std::string const &)*arg1,arg2,arg3);
  *(nix::File **)&jresult = new nix::File((const nix::File &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_File_1open_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  nix::FileMode arg2 ;
  nix::File result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (nix::FileMode)jarg2; 
  result = nix::File::open((std::string const &)*arg1,arg2);
  *(nix::File **)&jresult = new nix::File((const nix::File &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_File_1open_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  nix::File result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = nix::File::open((std::string const &)*arg1);
  *(nix::File **)&jresult = new nix::File((const nix::File &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_File_1blockCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nix::File *arg1 = (nix::File *) 0 ;
  ndsize_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::File **)&jarg1; 
  result = (ndsize_t)((nix::File const *)arg1)->blockCount();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_nixJNI_File_1hasBlock_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  nix::File *arg1 = (nix::File *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::File **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)((nix::File const *)arg1)->hasBlock((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_nixJNI_File_1hasBlock_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  nix::File *arg1 = (nix::File *) 0 ;
  nix::Block *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(nix::File **)&jarg1; 
  arg2 = *(nix::Block **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "nix::Block const & reference is null");
    return 0;
  } 
  result = (bool)((nix::File const *)arg1)->hasBlock((nix::Block const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_File_1getBlock_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  nix::File *arg1 = (nix::File *) 0 ;
  std::string *arg2 = 0 ;
  nix::Block result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::File **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = ((nix::File const *)arg1)->getBlock((std::string const &)*arg2);
  *(nix::Block **)&jresult = new nix::Block((const nix::Block &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_File_1getBlock_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  nix::File *arg1 = (nix::File *) 0 ;
  size_t arg2 ;
  nix::Block result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::File **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = ((nix::File const *)arg1)->getBlock(arg2);
  *(nix::Block **)&jresult = new nix::Block((const nix::Block &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_File_1createBlock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  nix::File *arg1 = (nix::File *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  nix::Block result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::File **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (arg1)->createBlock((std::string const &)*arg2,(std::string const &)*arg3);
  *(nix::Block **)&jresult = new nix::Block((const nix::Block &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_nixJNI_File_1deleteBlock_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  nix::File *arg1 = (nix::File *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::File **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->deleteBlock((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_nixJNI_File_1deleteBlock_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  nix::File *arg1 = (nix::File *) 0 ;
  nix::Block *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(nix::File **)&jarg1; 
  arg2 = *(nix::Block **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "nix::Block const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->deleteBlock((nix::Block const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_File_1blocks_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  nix::File *arg1 = (nix::File *) 0 ;
  util::Filter< nix::Block >::type *arg2 = 0 ;
  std::vector< nix::Block > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::File **)&jarg1; 
  arg2 = *(util::Filter< nix::Block >::type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "util::Filter< nix::Block >::type const & reference is null");
    return 0;
  } 
  result = ((nix::File const *)arg1)->blocks((util::Filter< nix::Block >::type const &)*arg2);
  *(std::vector< nix::Block > **)&jresult = new std::vector< nix::Block >((const std::vector< nix::Block > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_File_1blocks_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nix::File *arg1 = (nix::File *) 0 ;
  std::vector< nix::Block > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::File **)&jarg1; 
  result = ((nix::File const *)arg1)->blocks();
  *(std::vector< nix::Block > **)&jresult = new std::vector< nix::Block >((const std::vector< nix::Block > &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_nixJNI_File_1hasSection_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  nix::File *arg1 = (nix::File *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::File **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)((nix::File const *)arg1)->hasSection((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_nixJNI_File_1hasSection_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  nix::File *arg1 = (nix::File *) 0 ;
  nix::Section *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(nix::File **)&jarg1; 
  arg2 = *(nix::Section **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "nix::Section const & reference is null");
    return 0;
  } 
  result = (bool)((nix::File const *)arg1)->hasSection((nix::Section const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_File_1getSection_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  nix::File *arg1 = (nix::File *) 0 ;
  std::string *arg2 = 0 ;
  nix::Section result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::File **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = ((nix::File const *)arg1)->getSection((std::string const &)*arg2);
  *(nix::Section **)&jresult = new nix::Section((const nix::Section &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_File_1getSection_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  nix::File *arg1 = (nix::File *) 0 ;
  size_t arg2 ;
  nix::Section result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::File **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = ((nix::File const *)arg1)->getSection(arg2);
  *(nix::Section **)&jresult = new nix::Section((const nix::Section &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_File_1sectionCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nix::File *arg1 = (nix::File *) 0 ;
  ndsize_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::File **)&jarg1; 
  result = (ndsize_t)((nix::File const *)arg1)->sectionCount();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_File_1sections_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  nix::File *arg1 = (nix::File *) 0 ;
  util::Filter< nix::Section >::type *arg2 = 0 ;
  std::vector< nix::Section > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::File **)&jarg1; 
  arg2 = *(util::Filter< nix::Section >::type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "util::Filter< nix::Section >::type const & reference is null");
    return 0;
  } 
  result = ((nix::File const *)arg1)->sections((util::Filter< nix::Section >::type const &)*arg2);
  *(std::vector< nix::Section > **)&jresult = new std::vector< nix::Section >((const std::vector< nix::Section > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_File_1sections_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nix::File *arg1 = (nix::File *) 0 ;
  std::vector< nix::Section > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::File **)&jarg1; 
  result = ((nix::File const *)arg1)->sections();
  *(std::vector< nix::Section > **)&jresult = new std::vector< nix::Section >((const std::vector< nix::Section > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_File_1findSections_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  nix::File *arg1 = (nix::File *) 0 ;
  util::Filter< nix::Section >::type *arg2 = 0 ;
  size_t arg3 ;
  std::vector< nix::Section > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::File **)&jarg1; 
  arg2 = *(util::Filter< nix::Section >::type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "util::Filter< nix::Section >::type const & reference is null");
    return 0;
  } 
  arg3 = (size_t)jarg3; 
  result = ((nix::File const *)arg1)->findSections((util::Filter< nix::Section >::type const &)*arg2,arg3);
  *(std::vector< nix::Section > **)&jresult = new std::vector< nix::Section >((const std::vector< nix::Section > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_File_1findSections_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  nix::File *arg1 = (nix::File *) 0 ;
  util::Filter< nix::Section >::type *arg2 = 0 ;
  std::vector< nix::Section > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::File **)&jarg1; 
  arg2 = *(util::Filter< nix::Section >::type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "util::Filter< nix::Section >::type const & reference is null");
    return 0;
  } 
  result = ((nix::File const *)arg1)->findSections((util::Filter< nix::Section >::type const &)*arg2);
  *(std::vector< nix::Section > **)&jresult = new std::vector< nix::Section >((const std::vector< nix::Section > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_File_1findSections_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  nix::File *arg1 = (nix::File *) 0 ;
  size_t arg2 ;
  std::vector< nix::Section > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::File **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = ((nix::File const *)arg1)->findSections(arg2);
  *(std::vector< nix::Section > **)&jresult = new std::vector< nix::Section >((const std::vector< nix::Section > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_File_1findSections_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nix::File *arg1 = (nix::File *) 0 ;
  std::vector< nix::Section > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::File **)&jarg1; 
  result = ((nix::File const *)arg1)->findSections();
  *(std::vector< nix::Section > **)&jresult = new std::vector< nix::Section >((const std::vector< nix::Section > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_File_1createSection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  nix::File *arg1 = (nix::File *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  nix::Section result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::File **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (arg1)->createSection((std::string const &)*arg2,(std::string const &)*arg3);
  *(nix::Section **)&jresult = new nix::Section((const nix::Section &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_nixJNI_File_1deleteSection_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  nix::File *arg1 = (nix::File *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::File **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->deleteSection((std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_nixJNI_File_1deleteSection_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  nix::File *arg1 = (nix::File *) 0 ;
  nix::Section *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(nix::File **)&jarg1; 
  arg2 = *(nix::Section **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "nix::Section const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->deleteSection((nix::Section const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_File_1version(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nix::File *arg1 = (nix::File *) 0 ;
  std::vector< int > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::File **)&jarg1; 
  result = ((nix::File const *)arg1)->version();
  *(std::vector< int > **)&jresult = new std::vector< int >((const std::vector< int > &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_nixJNI_File_1format(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  nix::File *arg1 = (nix::File *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::File **)&jarg1; 
  result = ((nix::File const *)arg1)->format();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_nixJNI_File_1location(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  nix::File *arg1 = (nix::File *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::File **)&jarg1; 
  result = ((nix::File const *)arg1)->location();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_File_1createdAt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nix::File *arg1 = (nix::File *) 0 ;
  time_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::File **)&jarg1; 
  result = (time_t)((nix::File const *)arg1)->createdAt();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_File_1updatedAt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nix::File *arg1 = (nix::File *) 0 ;
  time_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::File **)&jarg1; 
  result = (time_t)((nix::File const *)arg1)->updatedAt();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nixJNI_File_1setUpdatedAt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  nix::File *arg1 = (nix::File *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::File **)&jarg1; 
  (arg1)->setUpdatedAt();
}


SWIGEXPORT void JNICALL Java_nixJNI_File_1forceUpdatedAt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  nix::File *arg1 = (nix::File *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::File **)&jarg1; 
  (arg1)->forceUpdatedAt();
}


SWIGEXPORT void JNICALL Java_nixJNI_File_1setCreatedAt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  nix::File *arg1 = (nix::File *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::File **)&jarg1; 
  (arg1)->setCreatedAt();
}


SWIGEXPORT void JNICALL Java_nixJNI_File_1forceCreatedAt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  nix::File *arg1 = (nix::File *) 0 ;
  time_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::File **)&jarg1; 
  arg2 = (time_t)jarg2; 
  (arg1)->forceCreatedAt(arg2);
}


SWIGEXPORT void JNICALL Java_nixJNI_File_1close(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  nix::File *arg1 = (nix::File *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::File **)&jarg1; 
  (arg1)->close();
}


SWIGEXPORT jboolean JNICALL Java_nixJNI_File_1isOpen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  nix::File *arg1 = (nix::File *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::File **)&jarg1; 
  result = (bool)((nix::File const *)arg1)->isOpen();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_nixJNI_File_1validate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  nix::File *arg1 = (nix::File *) 0 ;
  valid::Result result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(nix::File **)&jarg1; 
  result = ((nix::File const *)arg1)->validate();
  *(valid::Result **)&jresult = new valid::Result((const valid::Result &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_nixJNI_delete_1File(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  nix::File *arg1 = (nix::File *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(nix::File **)&jarg1; 
  delete arg1;
}


#ifdef __cplusplus
}
#endif

